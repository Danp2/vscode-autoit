
// Generated by peggy v. 1.2.0 (ts-pegjs plugin v. 1.2.2 )
//
// https://peggyjs.org/   https://github.com/metadevpro/ts-pegjs

"use strict";

export interface IFilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface IFileRange {
  start: IFilePosition;
  end: IFilePosition;
  source: string;
}

export interface ILiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface IClassParts extends Array<string | IClassParts> {}

export interface IClassExpectation {
  type: "class";
  parts: IClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface IAnyExpectation {
  type: "any";
}

export interface IEndExpectation {
  type: "end";
}

export interface IOtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;

function peg$padEnd(str: string, targetLength: number, padString: string) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

export class SyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null) {
    function hex(ch: string): string {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/"/g,  "\\\"")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function classEscape(s: string): string {
      return s
        .replace(/\\/g, "\\\\")
        .replace(/\]/g, "\\]")
        .replace(/\^/g, "\\^")
        .replace(/-/g,  "\\-")
        .replace(/\0/g, "\\0")
        .replace(/\t/g, "\\t")
        .replace(/\n/g, "\\n")
        .replace(/\r/g, "\\r")
        .replace(/[\x00-\x0F]/g,            (ch) => "\\x0" + hex(ch) )
        .replace(/[\x10-\x1F\x7F-\x9F]/g, (ch) => "\\x"  + hex(ch) );
    }

    function describeExpectation(expectation: Expectation) {
      switch (expectation.type) {
        case "literal":
          return "\"" + literalEscape(expectation.text) + "\"";
        case "class":
          const escapedParts = expectation.parts.map((part) => {
            return Array.isArray(part)
              ? classEscape(part[0] as string) + "-" + classEscape(part[1] as string)
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        case "any":
          return "any character";
        case "end":
          return "end of input";
        case "other":
          return expectation.description;
      }
    }

    function describeExpected(expected1: Expectation[]) {
      const descriptions = expected1.map(describeExpectation);
      let i: number;
      let j: number;

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found1: string | null) {
      return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }

  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: IFileRange;
  public name: string;

  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {
    super();
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = "SyntaxError";

    if (typeof (Object as any).setPrototypeOf === "function") {
      (Object as any).setPrototypeOf(this, SyntaxError.prototype);
    } else {
      (this as any).__proto__ = SyntaxError.prototype;
    }
    if (typeof (Error as any).captureStackTrace === "function") {
      (Error as any).captureStackTrace(this, SyntaxError);
    }
  }

  format(sources: { source: string; text: string }[]): string {
    let str = 'Error: ' + this.message;
    if (this.location) {
      let src: string[] | null = null;
      let k;
      for (k = 0; k < sources.length; k++) {
        if (sources[k].source === this.location.source) {
          src = sources[k].text.split(/\r\n|\n|\r/g);
          break;
        }
      }
      let s = this.location.start;
      let loc = this.location.source + ':' + s.line + ':' + s.column;
      if (src) {
        let e = this.location.end;
        let filler = peg$padEnd('', s.line.toString().length, ' ');
        let line = src[s.line - 1];
        let last = s.line === e.line ? e.column : line.length + 1;
        str += '\n --> ' + loc + '\n' + filler + ' |\n' + s.line + ' | ' + line + '\n' + filler + ' | ' +
          peg$padEnd('', s.column - 1, ' ') +
          peg$padEnd('', last - s.column, '^');
      } else {
        str += '\n at ' + loc;
      }
    }
    return str;
  }
}

export interface ICached {
  nextPos: number;
  result: any;
}

function peg$parse(input: string, options?: IParseOptions) {
  options = options !== undefined ? options : {};

  const peg$FAILED: Readonly<any> = {};
  const peg$source = options.grammarSource;

  const peg$startRuleFunctions: {[id: string]: any} = { Start: peg$parseStart };
  let peg$startRuleFunction: () => any = peg$parseStart;

  const peg$c0 = function(program: any): any { return program; };
  const peg$c1 = "#include-once";
  const peg$c2 = peg$literalExpectation("#include-once", true);
  const peg$c3 = function(): any {
      return { type: "IncludeOnceStatement" };
    };
  const peg$c4 = "#";
  const peg$c5 = peg$literalExpectation("#", false);
  const peg$c6 = "include";
  const peg$c7 = peg$literalExpectation("include", true);
  const peg$c8 = function(file: any): any { //FIXME: require once ore more whirespace
      return {
        type: "IncludeStatement",
        file: file,
        location: location(),
      };
    };
  const peg$c9 = peg$anyExpectation();
  const peg$c10 = function(body: any): any {
      return { type: "PreProcStatement", body: body };
    };
  const peg$c11 = "<";
  const peg$c12 = peg$literalExpectation("<", false);
  const peg$c13 = /^[^:?"<>]/;
  const peg$c14 = peg$classExpectation([":", "?", "\"", "<", ">"], true, false);
  const peg$c15 = ">";
  const peg$c16 = peg$literalExpectation(">", false);
  const peg$c17 = function(file: any): any {
      return file.join("");
    };
  const peg$c18 = "\"";
  const peg$c19 = peg$literalExpectation("\"", false);
  const peg$c20 = "'";
  const peg$c21 = peg$literalExpectation("'", false);
  const peg$c22 = /^[^:?"'<>]/;
  const peg$c23 = peg$classExpectation([":", "?", "\"", "'", "<", ">"], true, false);
  const peg$c24 = "\t";
  const peg$c25 = peg$literalExpectation("\t", false);
  const peg$c26 = " ";
  const peg$c27 = peg$literalExpectation(" ", false);
  const peg$c28 = "_";
  const peg$c29 = peg$literalExpectation("_", false);
  const peg$c30 = ",";
  const peg$c31 = peg$literalExpectation(",", false);
  const peg$c32 = function(head: any, tail: any): any {
        return buildList(head, tail, 3);
      };
  const peg$c33 = "[";
  const peg$c34 = peg$literalExpectation("[", false);
  const peg$c35 = "]";
  const peg$c36 = peg$literalExpectation("]", false);
  const peg$c37 = function(id: any, init: any): any {
        return {
          type: "VariableDeclarator",
          id: id,
          init: extractOptional(init, 1),
          location: location(),
        };
      };
  const peg$c38 = "=";
  const peg$c39 = peg$literalExpectation("=", false);
  const peg$c40 = function(id: any, init: any): any {
    return {
      type: "VariableDeclarator",
      id: id,
      init: extractOptional(init, 3),
      location: location(),
    }
  };
  const peg$c41 = function(expression: any): any { return expression; };
  const peg$c42 = "$";
  const peg$c43 = peg$literalExpectation("$", false);
  const peg$c44 = /^[a-zA-Z_]/;
  const peg$c45 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
  const peg$c46 = /^[0-9a-zA-Z_]/;
  const peg$c47 = peg$classExpectation([["0", "9"], ["a", "z"], ["A", "Z"], "_"], false, false);
  const peg$c48 = function(head: any, tail: any): any {return {
      type: "VariableIdentifier",
      name: head + tail.join("")
    }};
  const peg$c49 = /^[0-9a-f]/i;
  const peg$c50 = peg$classExpectation([["0", "9"], ["a", "f"]], false, true);
  const peg$c51 = "0x";
  const peg$c52 = peg$literalExpectation("0x", true);
  const peg$c53 = function(digits: any): any {
          return { type: "Literal", value: parseInt(digits, 16) };
      };
  const peg$c54 = /^[0-9]/;
  const peg$c55 = peg$classExpectation([["0", "9"]], false, false);
  const peg$c56 = peg$otherExpectation("string");
  const peg$c57 = /^[^"]/;
  const peg$c58 = peg$classExpectation(["\""], true, false);
  const peg$c59 = "\"\"";
  const peg$c60 = peg$literalExpectation("\"\"", false);
  const peg$c61 = function(chars: any): any {
      return { type: "Literal", value: chars.join("") }
    };
  const peg$c62 = /^[^']/;
  const peg$c63 = peg$classExpectation(["'"], true, false);
  const peg$c64 = "''";
  const peg$c65 = peg$literalExpectation("''", false);
  const peg$c66 = ";";
  const peg$c67 = peg$literalExpectation(";", false);
  const peg$c68 = /^[^\n\r]/;
  const peg$c69 = peg$classExpectation(["\n", "\r"], true, false);
  const peg$c70 = function(body: any): any {
    return {type: "SingleLineComment", body: body.join("")}
  };
  const peg$c71 = function(beforeBody: any, body: any, afterBody: any): any {
      return {
        type: "MultiLineComment",
        body: (extractOptional(beforeBody, 1) !== null ? [extractOptional(beforeBody, 1)] : []).concat(body.map((match) => match[1] ?? match).reduce((carry, match) => {
          typeof match === "string" && typeof match === typeof carry[carry.length-1] ? carry[carry.length-1]+=match : carry.push(match);
          return carry;
        }, []).concat(extractOptional(afterBody, 1) ?? [])),
      };
    };
  const peg$c72 = function(elements: any): any {
    return {
      type: "ArrayDeclaration",
      elements: elements,
    }
  };
  const peg$c73 = function(name: any): any { return name; };
  const peg$c74 = peg$otherExpectation("identifier");
  const peg$c75 = function(head: any, tail: any): any {
        return {
          type: "Identifier",
          name: head + tail.join("")
        };
      };
  const peg$c76 = "@";
  const peg$c77 = peg$literalExpectation("@", false);
  const peg$c78 = "appdatacommondir";
  const peg$c79 = peg$literalExpectation("AppDataCommonDir", true);
  const peg$c80 = "appdatadir";
  const peg$c81 = peg$literalExpectation("AppDataDir", true);
  const peg$c82 = "autoitexe";
  const peg$c83 = peg$literalExpectation("AutoItExe", true);
  const peg$c84 = "autoitpid";
  const peg$c85 = peg$literalExpectation("AutoItPID", true);
  const peg$c86 = "autoitversion";
  const peg$c87 = peg$literalExpectation("AutoItVersion", true);
  const peg$c88 = "autoitx64";
  const peg$c89 = peg$literalExpectation("AutoItX64", true);
  const peg$c90 = "com_eventobj";
  const peg$c91 = peg$literalExpectation("COM_EventObj", true);
  const peg$c92 = "commonfilesdir";
  const peg$c93 = peg$literalExpectation("CommonFilesDir", true);
  const peg$c94 = "compiled";
  const peg$c95 = peg$literalExpectation("Compiled", true);
  const peg$c96 = "computername";
  const peg$c97 = peg$literalExpectation("ComputerName", true);
  const peg$c98 = "comspec";
  const peg$c99 = peg$literalExpectation("ComSpec", true);
  const peg$c100 = "cpuarch";
  const peg$c101 = peg$literalExpectation("CPUArch", true);
  const peg$c102 = "crlf";
  const peg$c103 = peg$literalExpectation("CRLF", true);
  const peg$c104 = "cr";
  const peg$c105 = peg$literalExpectation("CR", true);
  const peg$c106 = "desktopcommondir";
  const peg$c107 = peg$literalExpectation("DesktopCommonDir", true);
  const peg$c108 = "desktopdepth";
  const peg$c109 = peg$literalExpectation("DesktopDepth", true);
  const peg$c110 = "desktopdir";
  const peg$c111 = peg$literalExpectation("DesktopDir", true);
  const peg$c112 = "desktopheight";
  const peg$c113 = peg$literalExpectation("DesktopHeight", true);
  const peg$c114 = "desktoprefresh";
  const peg$c115 = peg$literalExpectation("DesktopRefresh", true);
  const peg$c116 = "desktopwidth";
  const peg$c117 = peg$literalExpectation("DesktopWidth", true);
  const peg$c118 = "documentscommondir";
  const peg$c119 = peg$literalExpectation("DocumentsCommonDir", true);
  const peg$c120 = "error";
  const peg$c121 = peg$literalExpectation("error", true);
  const peg$c122 = "exitcode";
  const peg$c123 = peg$literalExpectation("exitCode", true);
  const peg$c124 = "exitmethod";
  const peg$c125 = peg$literalExpectation("exitMethod", true);
  const peg$c126 = "extended";
  const peg$c127 = peg$literalExpectation("extended", true);
  const peg$c128 = "favoritescommondir";
  const peg$c129 = peg$literalExpectation("FavoritesCommonDir", true);
  const peg$c130 = "favoritesdir";
  const peg$c131 = peg$literalExpectation("FavoritesDir", true);
  const peg$c132 = "gui_ctrlhandle";
  const peg$c133 = peg$literalExpectation("GUI_CtrlHandle", true);
  const peg$c134 = "gui_ctrlid";
  const peg$c135 = peg$literalExpectation("GUI_CtrlId", true);
  const peg$c136 = "gui_dragfile";
  const peg$c137 = peg$literalExpectation("GUI_DragFile", true);
  const peg$c138 = "gui_dragid";
  const peg$c139 = peg$literalExpectation("GUI_DragId", true);
  const peg$c140 = "gui_dropid";
  const peg$c141 = peg$literalExpectation("GUI_DropId", true);
  const peg$c142 = "gui_winhandle";
  const peg$c143 = peg$literalExpectation("GUI_WinHandle", true);
  const peg$c144 = "homedrive";
  const peg$c145 = peg$literalExpectation("HomeDrive", true);
  const peg$c146 = "homepath";
  const peg$c147 = peg$literalExpectation("HomePath", true);
  const peg$c148 = "homeshare";
  const peg$c149 = peg$literalExpectation("HomeShare", true);
  const peg$c150 = "hotkeypressed";
  const peg$c151 = peg$literalExpectation("HotKeyPressed", true);
  const peg$c152 = "hour";
  const peg$c153 = peg$literalExpectation("HOUR", true);
  const peg$c154 = "ipaddress";
  const peg$c155 = peg$literalExpectation("IPAddress", true);
  const peg$c156 = /^[1-4]/;
  const peg$c157 = peg$classExpectation([["1", "4"]], false, false);
  const peg$c158 = "kblayout";
  const peg$c159 = peg$literalExpectation("KBLayout", true);
  const peg$c160 = "lf";
  const peg$c161 = peg$literalExpectation("LF", true);
  const peg$c162 = "localappdatadir";
  const peg$c163 = peg$literalExpectation("LocalAppDataDir", true);
  const peg$c164 = "logondnsdomain";
  const peg$c165 = peg$literalExpectation("LogonDNSDomain", true);
  const peg$c166 = "logondomain";
  const peg$c167 = peg$literalExpectation("LogonDomain", true);
  const peg$c168 = "logonserver";
  const peg$c169 = peg$literalExpectation("LogonServer", true);
  const peg$c170 = "mday";
  const peg$c171 = peg$literalExpectation("MDAY", true);
  const peg$c172 = "min";
  const peg$c173 = peg$literalExpectation("MIN", true);
  const peg$c174 = "mon";
  const peg$c175 = peg$literalExpectation("MON", true);
  const peg$c176 = "msec";
  const peg$c177 = peg$literalExpectation("MSEC", true);
  const peg$c178 = "muilang";
  const peg$c179 = peg$literalExpectation("MUILang", true);
  const peg$c180 = "mydocumentsdir";
  const peg$c181 = peg$literalExpectation("MyDocumentsDir", true);
  const peg$c182 = "numparams";
  const peg$c183 = peg$literalExpectation("NumParams", true);
  const peg$c184 = "osarch";
  const peg$c185 = peg$literalExpectation("OSArch", true);
  const peg$c186 = "osbuild";
  const peg$c187 = peg$literalExpectation("OSBuild", true);
  const peg$c188 = "oslang";
  const peg$c189 = peg$literalExpectation("OSLang", true);
  const peg$c190 = "osservicepack";
  const peg$c191 = peg$literalExpectation("OSServicePack", true);
  const peg$c192 = "ostype";
  const peg$c193 = peg$literalExpectation("OSType", true);
  const peg$c194 = "osversion";
  const peg$c195 = peg$literalExpectation("OSVersion", true);
  const peg$c196 = "programfilesdir";
  const peg$c197 = peg$literalExpectation("ProgramFilesDir", true);
  const peg$c198 = "programscommondir";
  const peg$c199 = peg$literalExpectation("ProgramsCommonDir", true);
  const peg$c200 = "programsdir";
  const peg$c201 = peg$literalExpectation("ProgramsDir", true);
  const peg$c202 = "scriptdir";
  const peg$c203 = peg$literalExpectation("ScriptDir", true);
  const peg$c204 = "scriptfullpath";
  const peg$c205 = peg$literalExpectation("ScriptFullPath", true);
  const peg$c206 = "scriptlinenumber";
  const peg$c207 = peg$literalExpectation("ScriptLineNumber", true);
  const peg$c208 = "scriptname";
  const peg$c209 = peg$literalExpectation("ScriptName", true);
  const peg$c210 = "sec";
  const peg$c211 = peg$literalExpectation("SEC", true);
  const peg$c212 = "startmenucommondir";
  const peg$c213 = peg$literalExpectation("StartMenuCommonDir", true);
  const peg$c214 = "startmenudir";
  const peg$c215 = peg$literalExpectation("StartMenuDir", true);
  const peg$c216 = "startupcommondir";
  const peg$c217 = peg$literalExpectation("StartupCommonDir", true);
  const peg$c218 = "startupdir";
  const peg$c219 = peg$literalExpectation("StartupDir", true);
  const peg$c220 = "sw_disable";
  const peg$c221 = peg$literalExpectation("SW_DISABLE", true);
  const peg$c222 = "sw_enable";
  const peg$c223 = peg$literalExpectation("SW_ENABLE", true);
  const peg$c224 = "sw_hide";
  const peg$c225 = peg$literalExpectation("SW_HIDE", true);
  const peg$c226 = "sw_lock";
  const peg$c227 = peg$literalExpectation("SW_LOCK", true);
  const peg$c228 = "sw_maximize";
  const peg$c229 = peg$literalExpectation("SW_MAXIMIZE", true);
  const peg$c230 = "sw_minimize";
  const peg$c231 = peg$literalExpectation("SW_MINIMIZE", true);
  const peg$c232 = "sw_restore";
  const peg$c233 = peg$literalExpectation("SW_RESTORE", true);
  const peg$c234 = "sw_show";
  const peg$c235 = peg$literalExpectation("SW_SHOW", true);
  const peg$c236 = "sw_showdefault";
  const peg$c237 = peg$literalExpectation("SW_SHOWDEFAULT", true);
  const peg$c238 = "sw_showmaximized";
  const peg$c239 = peg$literalExpectation("SW_SHOWMAXIMIZED", true);
  const peg$c240 = "sw_showminimized";
  const peg$c241 = peg$literalExpectation("SW_SHOWMINIMIZED", true);
  const peg$c242 = "sw_showminnoactive";
  const peg$c243 = peg$literalExpectation("SW_SHOWMINNOACTIVE", true);
  const peg$c244 = "sw_showna";
  const peg$c245 = peg$literalExpectation("SW_SHOWNA", true);
  const peg$c246 = "sw_shownoactivate";
  const peg$c247 = peg$literalExpectation("SW_SHOWNOACTIVATE", true);
  const peg$c248 = "sw_shownormal";
  const peg$c249 = peg$literalExpectation("SW_SHOWNORMAL", true);
  const peg$c250 = "sw_unlock";
  const peg$c251 = peg$literalExpectation("SW_UNLOCK", true);
  const peg$c252 = "systemdir";
  const peg$c253 = peg$literalExpectation("SystemDir", true);
  const peg$c254 = "tab";
  const peg$c255 = peg$literalExpectation("TAB", true);
  const peg$c256 = "tempdir";
  const peg$c257 = peg$literalExpectation("TempDir", true);
  const peg$c258 = "tray_id";
  const peg$c259 = peg$literalExpectation("TRAY_ID", true);
  const peg$c260 = "trayiconflashing";
  const peg$c261 = peg$literalExpectation("TrayIconFlashing", true);
  const peg$c262 = "trayiconvisible";
  const peg$c263 = peg$literalExpectation("TrayIconVisible", true);
  const peg$c264 = "username";
  const peg$c265 = peg$literalExpectation("UserName", true);
  const peg$c266 = "userprofiledir";
  const peg$c267 = peg$literalExpectation("UserProfileDir", true);
  const peg$c268 = "wday";
  const peg$c269 = peg$literalExpectation("WDAY", true);
  const peg$c270 = "windowsdir";
  const peg$c271 = peg$literalExpectation("WindowsDir", true);
  const peg$c272 = "workingdir";
  const peg$c273 = peg$literalExpectation("WorkingDir", true);
  const peg$c274 = "yday";
  const peg$c275 = peg$literalExpectation("YDAY", true);
  const peg$c276 = "year";
  const peg$c277 = peg$literalExpectation("YEAR", true);
  const peg$c278 = function(): any { return { type: "Literal", value: null }; };
  const peg$c279 = "@RESERVED";
  const peg$c280 = peg$literalExpectation("@RESERVED", false);
  const peg$c281 = function(cases: any): any {
      return {
        type: "SelectStatement",
        cases: cases
      };
    };
  const peg$c282 = function(before: any, default_: any, after: any): any {//FIXME: verify that other case clauses can come after the default clase in au3
        return optionalList(extractOptional(before, 0))
          .concat(default_)
          .concat(optionalList(extractOptional(after, 0)));
      };
  const peg$c283 = function(clauses: any): any { //FIXME: verify that "?" CAN be there
      return optionalList(extractOptional(clauses, 0));
    };
  const peg$c284 = function(head: any, tail: any): any { return buildList(head, tail, 1); };
  const peg$c285 = function(tests: any, consequent: any): any {
        return {
          type: "SelectCase",
          tests: tests,
          consequent: optionalList(extractOptional(consequent, 1))
        };
      };
  const peg$c286 = function(): any { return { type: "Literal", value: true  }; };
  const peg$c287 = function(): any { return { type: "Literal", value: false }; };
  const peg$c288 = "and";
  const peg$c289 = peg$literalExpectation("And", true);
  const peg$c290 = "byref";
  const peg$c291 = peg$literalExpectation("ByRef", true);
  const peg$c292 = "case";
  const peg$c293 = peg$literalExpectation("Case", true);
  const peg$c294 = "ce";
  const peg$c295 = peg$literalExpectation("ce", true);
  const peg$c296 = "comments-start";
  const peg$c297 = peg$literalExpectation("comments-start", true);
  const peg$c298 = "comments-end";
  const peg$c299 = peg$literalExpectation("comments-end", true);
  const peg$c300 = "const";
  const peg$c301 = peg$literalExpectation("Const", true);
  const peg$c302 = "continuecase";
  const peg$c303 = peg$literalExpectation("ContinueCase", true);
  const peg$c304 = "continueloop";
  const peg$c305 = peg$literalExpectation("ContinueLoop", true);
  const peg$c306 = "cs";
  const peg$c307 = peg$literalExpectation("cs", true);
  const peg$c308 = "default";
  const peg$c309 = peg$literalExpectation("Default", true);
  const peg$c310 = "dim";
  const peg$c311 = peg$literalExpectation("Dim", true);
  const peg$c312 = "do";
  const peg$c313 = peg$literalExpectation("Do", true);
  const peg$c314 = "else";
  const peg$c315 = peg$literalExpectation("Else", true);
  const peg$c316 = "elseif";
  const peg$c317 = peg$literalExpectation("ElseIf", true);
  const peg$c318 = "endfunc";
  const peg$c319 = peg$literalExpectation("EndFunc", true);
  const peg$c320 = "endif";
  const peg$c321 = peg$literalExpectation("EndIf", true);
  const peg$c322 = "endselect";
  const peg$c323 = peg$literalExpectation("EndSelect", true);
  const peg$c324 = "endswitch";
  const peg$c325 = peg$literalExpectation("EndSwitch", true);
  const peg$c326 = "endwith";
  const peg$c327 = peg$literalExpectation("EndWith", true);
  const peg$c328 = "enum";
  const peg$c329 = peg$literalExpectation("Enum", true);
  const peg$c330 = "exit";
  const peg$c331 = peg$literalExpectation("Exit", true);
  const peg$c332 = "exitloop";
  const peg$c333 = peg$literalExpectation("ExitLoop", true);
  const peg$c334 = "false";
  const peg$c335 = peg$literalExpectation("False", true);
  const peg$c336 = "for";
  const peg$c337 = peg$literalExpectation("For", true);
  const peg$c338 = "func";
  const peg$c339 = peg$literalExpectation("Func", true);
  const peg$c340 = "global";
  const peg$c341 = peg$literalExpectation("Global", true);
  const peg$c342 = "if";
  const peg$c343 = peg$literalExpectation("If", true);
  const peg$c344 = "in";
  const peg$c345 = peg$literalExpectation("In", true);
  const peg$c346 = "local";
  const peg$c347 = peg$literalExpectation("Local", true);
  const peg$c348 = "next";
  const peg$c349 = peg$literalExpectation("Next", true);
  const peg$c350 = "null";
  const peg$c351 = peg$literalExpectation("Null", true);
  const peg$c352 = "not";
  const peg$c353 = peg$literalExpectation("Not", true);
  const peg$c354 = "or";
  const peg$c355 = peg$literalExpectation("Or", true);
  const peg$c356 = "redim";
  const peg$c357 = peg$literalExpectation("Redim", true);
  const peg$c358 = "return";
  const peg$c359 = peg$literalExpectation("Return", true);
  const peg$c360 = "select";
  const peg$c361 = peg$literalExpectation("Select", true);
  const peg$c362 = "static";
  const peg$c363 = peg$literalExpectation("Static", true);
  const peg$c364 = "step";
  const peg$c365 = peg$literalExpectation("Step", true);
  const peg$c366 = "switch";
  const peg$c367 = peg$literalExpectation("Switch", true);
  const peg$c368 = "then";
  const peg$c369 = peg$literalExpectation("Then", true);
  const peg$c370 = "to";
  const peg$c371 = peg$literalExpectation("To", true);
  const peg$c372 = "until";
  const peg$c373 = peg$literalExpectation("Until", true);
  const peg$c374 = "volatile";
  const peg$c375 = peg$literalExpectation("Volatile", true);
  const peg$c376 = "True";
  const peg$c377 = peg$literalExpectation("True", false);
  const peg$c378 = "wend";
  const peg$c379 = peg$literalExpectation("WEnd", true);
  const peg$c380 = "while";
  const peg$c381 = peg$literalExpectation("While", true);
  const peg$c382 = "with";
  const peg$c383 = peg$literalExpectation("With", true);
  const peg$c384 = /^[a-z]/i;
  const peg$c385 = peg$classExpectation([["a", "z"]], false, true);
  const peg$c386 = peg$otherExpectation("number");
  const peg$c387 = function(literal: any): any {
        return literal;
      };
  const peg$c388 = /^[1-9]/;
  const peg$c389 = peg$classExpectation([["1", "9"]], false, false);
  const peg$c390 = ".";
  const peg$c391 = peg$literalExpectation(".", false);
  const peg$c392 = function(): any {
        return { type: "Literal", value: parseFloat(text()) };
      };
  const peg$c393 = "e";
  const peg$c394 = peg$literalExpectation("e", true);
  const peg$c395 = /^[+\-]/;
  const peg$c396 = peg$classExpectation(["+", "-"], false, false);
  const peg$c397 = function(head: any, property: any): any {
            return { property: property, computed: true };
          };
  const peg$c398 = function(head: any, property: any): any {
            return { property: property, computed: false };
          };
  const peg$c399 = function(head: any, tail: any): any {
        return tail.reduce(function(result, element) {
          return {
            type: "MemberExpression",
            object: result,
            property: element.property,
            computed: element.computed
          };
        }, head);
      };
  const peg$c400 = "(";
  const peg$c401 = peg$literalExpectation("(", false);
  const peg$c402 = ")";
  const peg$c403 = peg$literalExpectation(")", false);
  const peg$c404 = function(callee: any, args: any): any {
          return { type: "CallExpression", callee: callee, arguments: args };
        };
  const peg$c405 = function(head: any, args: any): any {
            return { type: "CallExpression", arguments: args };
          };
  const peg$c406 = function(head: any, property: any): any {
            return {
              type: "MemberExpression",
              property: property,
              computed: true
            };
          };
  const peg$c407 = function(head: any, property: any): any {
            return {
              type: "MemberExpression",
              property: property,
              computed: false
            };
          };
  const peg$c408 = function(head: any, tail: any): any {
        return tail.reduce(function(result, element) {
          element[TYPES_TO_PROPERTY_NAMES[element.type]] = result;
          return element;
        }, head);
      };
  const peg$c409 = function(args: any): any {
        return optionalList(extractOptional(args, 0));
      };
  const peg$c410 = function(left: any, right: any): any {
        return {
          type: "AssignmentExpression",
          operator: "=",
          left: left,
          right: right
        };
      };
  const peg$c411 = function(left: any, operator: any, right: any): any {
        return {
          type: "AssignmentExpression",
          operator: operator,
          left: left,
          right: right
        };
      };
  const peg$c412 = "*=";
  const peg$c413 = peg$literalExpectation("*=", false);
  const peg$c414 = "/=";
  const peg$c415 = peg$literalExpectation("/=", false);
  const peg$c416 = "+=";
  const peg$c417 = peg$literalExpectation("+=", false);
  const peg$c418 = "-=";
  const peg$c419 = peg$literalExpectation("-=", false);
  const peg$c420 = "&=";
  const peg$c421 = peg$literalExpectation("&=", false);
  const peg$c422 = "?";
  const peg$c423 = peg$literalExpectation("?", false);
  const peg$c424 = ":";
  const peg$c425 = peg$literalExpectation(":", false);
  const peg$c426 = function(test: any, consequent: any, alternate: any): any {
        return {
          type: "ConditionalExpression",
          test: test,
          consequent: consequent,
          alternate: alternate
        };
      };
  const peg$c427 = function(head: any, tail: any): any { return buildLogicalExpression(head, tail); };
  const peg$c428 = function(head: any, tail: any): any { return buildBinaryExpression(head, tail); };
  const peg$c429 = "==";
  const peg$c430 = peg$literalExpectation("==", false);
  const peg$c431 = "+";
  const peg$c432 = peg$literalExpectation("+", false);
  const peg$c433 = /^[+=]/;
  const peg$c434 = peg$classExpectation(["+", "="], false, false);
  const peg$c435 = "-";
  const peg$c436 = peg$literalExpectation("-", false);
  const peg$c437 = /^[\-=]/;
  const peg$c438 = peg$classExpectation(["-", "="], false, false);
  const peg$c439 = "&";
  const peg$c440 = peg$literalExpectation("&", false);
  const peg$c441 = /^[=]/;
  const peg$c442 = peg$classExpectation(["="], false, false);
  const peg$c443 = "<=";
  const peg$c444 = peg$literalExpectation("<=", false);
  const peg$c445 = ">=";
  const peg$c446 = peg$literalExpectation(">=", false);
  const peg$c447 = "<>";
  const peg$c448 = peg$literalExpectation("<>", false);
  const peg$c449 = "*";
  const peg$c450 = peg$literalExpectation("*", false);
  const peg$c451 = "/";
  const peg$c452 = peg$literalExpectation("/", false);
  const peg$c453 = "^";
  const peg$c454 = peg$literalExpectation("^", false);
  const peg$c455 = function(operator: any, argument: any): any {
        return {
          type: "UnaryExpression",
          operator: operator,
          argument: argument,
          prefix: true
        };
      };
  const peg$c456 = function(body: any): any {
        return {
          type: "Program",
          body: optionalList(body)
        };
      };
  const peg$c457 = function(head: any, tail: any): any {
        return buildList(head, tail, 1);
      };
  const peg$c458 = function(preproc: any): any {
    return preproc;
  };
  const peg$c459 = "Volatile";
  const peg$c460 = peg$literalExpectation("Volatile", false);
  const peg$c461 = function(id: any, params: any, body: any): any {
      return {
        type: "FunctionDeclaration",
        id: id,
        params: optionalList(extractOptional(params, 0)),
        body: optionalList(body),
        location: location()
      };
    };
  const peg$c462 = function(_const: any, id: any, init: any): any {
      return {
        type: "Parameter",
        "const": !!extractOptional(_const, 0),
        byref: true,
        id: id,
        init: extractOptional(init, 2),
      };
    };
  const peg$c463 = function(byref: any, id: any, init: any): any {
      return {
        type: "Parameter",
        byref: !!extractOptional(byref, 0),
        "const": true,
        id: id,
        init: extractOptional(init, 2),
      };
    };
  const peg$c464 = function(id: any, init: any): any {
      return {
        type: "Parameter",
        "const": false,
        byref: true,
        id: id,
        init: extractOptional(init, 2),
      };
    };
  const peg$c465 = function(): any { return { type: "EmptyStatement" }; };
  const peg$c466 = function(static_: any, scope: any, constant: any, declarations: any): any {
      return {
        scope: extractOptional(scope, 0),
        constant: !!constant,
        static_: !!static_,
        type: "VariableDeclaration",
        declarations: declarations,
        location: location(),
      }
    };
  const peg$c467 = function(scope: any, static_: any, constant: any, declarations: any): any {
      return {
        scope: extractOptional(scope, 0),
        constant: !!constant,
        static_: !!static_,
        type: "VariableDeclaration",
        declarations: declarations,
        location: location(),
      }
    };
  const peg$c468 = function(head: any, tail: any): any {
      return {
        type: "RedimExpression",
        declarations: buildList(head, tail, 3),
      };
    };
  const peg$c469 = function(scope: any, constant: any, declarations: any): any {
      return {
        scope: extractOptional(scope, 0),
        constant: !!constant,
        static: false,
        type: "VariableDeclaration",
        declarations: declarations,
      }
    };
  const peg$c470 = function(expression: any): any {
        return {
          type: "ExpressionStatement",
          expression: expression
        };
      };
  const peg$c471 = function(body: any, test: any): any { return { type: "DoWhileStatement", body: body ?? [], test: test }; };
  const peg$c472 = function(test: any, body: any): any { return { type: "WhileStatement", test: test, body: body ?? [] }; };
  const peg$c473 = peg$otherExpectation("end of line");
  const peg$c474 = "\n";
  const peg$c475 = peg$literalExpectation("\n", false);
  const peg$c476 = "\r\n";
  const peg$c477 = peg$literalExpectation("\r\n", false);
  const peg$c478 = "\r";
  const peg$c479 = peg$literalExpectation("\r", false);
  const peg$c480 = "\u2028";
  const peg$c481 = peg$literalExpectation("\u2028", false);
  const peg$c482 = "\u2029";
  const peg$c483 = peg$literalExpectation("\u2029", false);
  const peg$c484 = function(head: any): any {
        return head;
      };
  const peg$c485 = function(argument: any): any {
      return {
        type: "ExitStatement",
        argument: extractOptional(argument, 1),
      }
    };
  const peg$c486 = function(discriminant: any, cases: any): any {
      return {
        type: "SwitchStatement",
        discriminant: discriminant,
        cases: cases
      };
    };
  const peg$c487 = function(tests: any, consequent: any): any {
        return {
          type: "SwitchCase",
          tests: tests,
          consequent: optionalList(extractOptional(consequent, 1))
        };
      };
  const peg$c488 = function(consequent: any): any {
        return {
          type: "SwitchCase",
          test: null,
          consequent: optionalList(extractOptional(consequent, 1))
        };
      };
  const peg$c489 = function(from: any, to: any): any {
      return {
        type: "SwitchCaseRange",
        from: from,
        to: to,
      }
    };

  let peg$currPos = 0;
  let peg$savedPos = 0;
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
  let peg$maxFailPos = 0;
  let peg$maxFailExpected: Expectation[] = [];
  let peg$silentFails = 0;

  const peg$resultsCache: {[id: number]: ICached} = {};

  let peg$result;

  if (options.startRule !== undefined) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text(): string {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location(): IFileRange {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location1
    );
  }

  function error(message: string, location1?: IFileRange) {
    location1 = location1 !== undefined
      ? location1
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location1);
  }

  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {
    return { type: "literal", text: text1, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation(): IAnyExpectation {
    return { type: "any" };
  }

  function peg$endExpectation(): IEndExpectation {
    return { type: "end" };
  }

  function peg$otherExpectation(description: string): IOtherExpectation {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos: number) {
    let details = peg$posDetailsCache[pos];
    let p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos: number, endPos: number): IFileRange {
    const startPosDetails = peg$computePosDetails(startPos);
    const endPosDetails = peg$computePosDetails(endPos);

    return {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected1: Expectation) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected1);
  }

  function peg$buildSimpleError(message: string, location1: IFileRange) {
    return new SyntaxError(message, [], "", location1);
  }

  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {
    return new SyntaxError(
      SyntaxError.buildMessage(expected1, found),
      expected1,
      found,
      location1
    );
  }

  function peg$parseStart(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 0;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseProgram();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePreProc(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 158 + 1;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c1) {
      s1 = input.substr(peg$currPos, 13);
      peg$currPos += 13;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c3();
    }
    s0 = s1;
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c4;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s1 as any !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c6) {
          s2 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parseWhitespace();
          if (s3 as any !== peg$FAILED) {
            s4 = peg$parseIncludeFileNameLiteral();
            if (s4 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c8(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c4;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c5); }
        }
        if (s1 as any !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseCSToken();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseCEToken();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parseCommentsStartToken();
              if (s3 as any === peg$FAILED) {
                s3 = peg$parseCommentsEndToken();
              }
            }
          }
          peg$silentFails--;
          if (s3 as any === peg$FAILED) {
            s2 = undefined;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 as any !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            s6 = peg$parseLineTerminatorSequence();
            peg$silentFails--;
            if (s6 as any === peg$FAILED) {
              s5 = undefined;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 as any !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s6 as any !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 as any !== peg$FAILED) {
              while (s4 as any !== peg$FAILED) {
                s3.push(s4);
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                s6 = peg$parseLineTerminatorSequence();
                peg$silentFails--;
                if (s6 as any === peg$FAILED) {
                  s5 = undefined;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
                if (s5 as any !== peg$FAILED) {
                  if (input.length > peg$currPos) {
                    s6 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c9); }
                  }
                  if (s6 as any !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c10(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIncludeFileNameLiteral(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 2;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      s1 = peg$c11;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c12); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c13.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c14); }
      }
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          if (peg$c13.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c14); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 62) {
          s3 = peg$c15;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c18;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 as any !== peg$FAILED) {
        s2 = [];
        if (peg$c13.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s3 as any !== peg$FAILED) {
          while (s3 as any !== peg$FAILED) {
            s2.push(s3);
            if (peg$c13.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s3 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c17(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c20;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c21); }
        }
        if (s1 as any !== peg$FAILED) {
          s2 = [];
          if (peg$c22.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
          if (s3 as any !== peg$FAILED) {
            while (s3 as any !== peg$FAILED) {
              s2.push(s3);
              if (peg$c22.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c23); }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c20;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c21); }
            }
            if (s3 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c17(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLiteralWhitespace(): any {
    let s0;

    const key = peg$currPos * 158 + 3;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 9) {
      s0 = peg$c24;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c25); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 32) {
        s0 = peg$c26;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseWhitespace(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 4;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseLineContinuation();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseLiteralWhitespace();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseLiteralWhitespace();
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = [];
      s1 = peg$parseLiteralWhitespace();
      if (s1 as any !== peg$FAILED) {
        while (s1 as any !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseLiteralWhitespace();
        }
      } else {
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseOptionalWhitespace(): any {
    let s0;

    const key = peg$currPos * 158 + 5;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseWhitespace();
    if (s0 as any === peg$FAILED) {
      s0 = null;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLineContinuation(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 158 + 6;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseLiteralWhitespace();
    if (s2 as any !== peg$FAILED) {
      while (s2 as any !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseLiteralWhitespace();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 95) {
        s2 = peg$c28;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseLiteralWhitespace();
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseLiteralWhitespace();
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSingleLineComment();
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseLineTerminatorSequence();
            if (s5 as any !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEnumDeclarationList(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 7;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEnumDeclaration();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c30;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseEnumDeclaration();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c30;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseEnumDeclaration();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c32(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseVariableDeclarationList(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 8;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseVariableDeclaration();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c30;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseVariableDeclaration();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c30;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseVariableDeclaration();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c32(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseVariableDeclaration(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    const key = peg$currPos * 158 + 9;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseVariableIdentifier();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s4 = peg$c33;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parse__();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parseExpression();
          if (s6 as any === peg$FAILED) {
            s6 = null;
          }
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parse__();
            if (s7 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s8 = peg$c35;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c36); }
              }
              if (s8 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7, s8];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c33;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parseExpression();
            if (s6 as any === peg$FAILED) {
              s6 = null;
            }
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s8 = peg$c35;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c36); }
                }
                if (s8 as any !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7, s8];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseInitialiser();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c37(s1, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEnumDeclaration(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 158 + 10;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseVariableIdentifier();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c38;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parseAssignmentExpression();
            if (s6 as any !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c40(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseInitialiser(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 11;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c38;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c39); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s3 = peg$c38;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseAssignmentExpression();
          if (s4 as any === peg$FAILED) {
            s4 = peg$parseArrayDeclaration();
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c41(s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseVariableIdentifier(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 12;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c42;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c43); }
    }
    if (s1 as any !== peg$FAILED) {
      if (peg$c44.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c45); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        if (peg$c46.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          if (peg$c46.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c47); }
          }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c48(s2, s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNumber(): any {
    let s0;

    const key = peg$currPos * 158 + 13;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseHexIntegerLiteral();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseInteger();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseHexDigit(): any {
    let s0;

    const key = peg$currPos * 158 + 14;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c49.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseHexIntegerLiteral(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 15;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c51) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseHexDigit();
      if (s4 as any !== peg$FAILED) {
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseHexDigit();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c53(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseInteger(): any {
    let s0, s1;

    const key = peg$currPos * 158 + 16;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (peg$c54.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c55); }
    }
    if (s1 as any !== peg$FAILED) {
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        if (peg$c54.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseStringLiteral(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 17;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c18;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c19); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c57.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c58); }
      }
      if (s3 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c59) {
          s3 = peg$c59;
          peg$currPos += 2;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c60); }
        }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        if (peg$c57.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c58); }
        }
        if (s3 as any === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c59) {
            s3 = peg$c59;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c60); }
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c18;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c61(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c20;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 as any !== peg$FAILED) {
        s2 = [];
        if (peg$c62.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c63); }
        }
        if (s3 as any === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c64) {
            s3 = peg$c64;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
        }
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          if (peg$c62.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
          if (s3 as any === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c64) {
              s3 = peg$c64;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c65); }
            }
          }
        }
        if (s2 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c20;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
          if (s3 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c61(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseComment(): any {
    let s0;

    const key = peg$currPos * 158 + 18;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseSingleLineComment();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseMultiLineComment();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSingleLineComment(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 19;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c66;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c67); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      if (peg$c68.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c69); }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        if (peg$c68.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c69); }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c70(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMultiLineCommentStartTag(): any {
    let s0, s1, s2;

    const key = peg$currPos * 158 + 20;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseCSToken();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseCommentsStartToken();
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMultiLineComment(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    const key = peg$currPos * 158 + 21;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseMultiLineCommentStartTag();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseLiteralWhitespace();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$currPos;
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$currPos;
        peg$silentFails++;
        s8 = peg$parseLineTerminatorSequence();
        peg$silentFails--;
        if (s8 as any === peg$FAILED) {
          s7 = undefined;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 as any !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s8 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s8 as any !== peg$FAILED) {
            s7 = [s7, s8];
            s6 = s7;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 as any !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$currPos;
          peg$silentFails++;
          s8 = peg$parseLineTerminatorSequence();
          peg$silentFails--;
          if (s8 as any === peg$FAILED) {
            s7 = undefined;
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 as any !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s8 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s8 as any !== peg$FAILED) {
              s7 = [s7, s8];
              s6 = s7;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        if (s5 as any !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseMultiLineComment();
        if (s4 as any === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$currPos;
          peg$silentFails++;
          s6 = peg$currPos;
          s7 = peg$parseLineTerminatorSequence();
          if (s7 as any !== peg$FAILED) {
            s8 = [];
            s9 = peg$parseWhitespace();
            while (s9 as any !== peg$FAILED) {
              s8.push(s9);
              s9 = peg$parseWhitespace();
            }
            if (s8 as any !== peg$FAILED) {
              s9 = peg$parseMultiLineCommentEndTag();
              if (s9 as any !== peg$FAILED) {
                s7 = [s7, s8, s9];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
          peg$silentFails--;
          if (s6 as any === peg$FAILED) {
            s5 = undefined;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 as any !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c9); }
            }
            if (s6 as any !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseMultiLineComment();
          if (s4 as any === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$currPos;
            peg$silentFails++;
            s6 = peg$currPos;
            s7 = peg$parseLineTerminatorSequence();
            if (s7 as any !== peg$FAILED) {
              s8 = [];
              s9 = peg$parseWhitespace();
              while (s9 as any !== peg$FAILED) {
                s8.push(s9);
                s9 = peg$parseWhitespace();
              }
              if (s8 as any !== peg$FAILED) {
                s9 = peg$parseMultiLineCommentEndTag();
                if (s9 as any !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            peg$silentFails--;
            if (s6 as any === peg$FAILED) {
              s5 = undefined;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 as any !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c9); }
              }
              if (s6 as any !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseLineTerminatorSequence();
          if (s4 as any !== peg$FAILED) {
            s5 = [];
            s6 = peg$parseWhitespace();
            while (s6 as any !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseWhitespace();
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseMultiLineCommentEndTag();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = [];
                s9 = peg$parseLiteralWhitespace();
                if (s9 as any !== peg$FAILED) {
                  while (s9 as any !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseLiteralWhitespace();
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 as any !== peg$FAILED) {
                  s9 = peg$currPos;
                  s10 = [];
                  s11 = peg$currPos;
                  s12 = peg$currPos;
                  peg$silentFails++;
                  s13 = peg$parseLineTerminatorSequence();
                  peg$silentFails--;
                  if (s13 as any === peg$FAILED) {
                    s12 = undefined;
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                  if (s12 as any !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s13 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c9); }
                    }
                    if (s13 as any !== peg$FAILED) {
                      s12 = [s12, s13];
                      s11 = s12;
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s11;
                    s11 = peg$FAILED;
                  }
                  while (s11 as any !== peg$FAILED) {
                    s10.push(s11);
                    s11 = peg$currPos;
                    s12 = peg$currPos;
                    peg$silentFails++;
                    s13 = peg$parseLineTerminatorSequence();
                    peg$silentFails--;
                    if (s13 as any === peg$FAILED) {
                      s12 = undefined;
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 as any !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s13 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s13 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c9); }
                      }
                      if (s13 as any !== peg$FAILED) {
                        s12 = [s12, s13];
                        s11 = s12;
                      } else {
                        peg$currPos = s11;
                        s11 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s11;
                      s11 = peg$FAILED;
                    }
                  }
                  if (s10 as any !== peg$FAILED) {
                    s9 = input.substring(s9, peg$currPos);
                  } else {
                    s9 = s10;
                  }
                  if (s9 as any !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 as any === peg$FAILED) {
                  s7 = null;
                }
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c71(s2, s3, s7);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMultiLineCommentEndTag(): any {
    let s0, s1, s2;

    const key = peg$currPos * 158 + 22;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 35) {
      s1 = peg$c4;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c5); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseCEToken();
      if (s2 as any === peg$FAILED) {
        s2 = peg$parseCommentsEndToken();
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseArrayDeclaration(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 158 + 23;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c33;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseArrayDeclarationElementList();
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c35;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c72(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseArrayDeclarationElementList(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 24;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseExpression();
    if (s1 as any === peg$FAILED) {
      s1 = peg$parseArrayDeclaration();
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c30;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseExpression();
            if (s7 as any === peg$FAILED) {
              s7 = peg$parseArrayDeclaration();
            }
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c30;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseExpression();
              if (s7 as any === peg$FAILED) {
                s7 = peg$parseArrayDeclaration();
              }
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c32(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIdentifier(): any {
    let s0, s1, s2;

    const key = peg$currPos * 158 + 25;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseReservedWord();
    peg$silentFails--;
    if (s2 as any === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseIdentifierName();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c73(s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIdentifierName(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 26;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseIdentifierStart();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseIdentifierPart();
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseIdentifierPart();
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c75(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIdentifierStart(): any {
    let s0;

    const key = peg$currPos * 158 + 27;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseLetter();
    if (s0 as any === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 95) {
        s0 = peg$c28;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIdentifierPart(): any {
    let s0;

    const key = peg$currPos * 158 + 28;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseIdentifierStart();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseDecimalDigit();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMacro(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 29;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 64) {
      s1 = peg$c76;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c77); }
    }
    if (s1 as any !== peg$FAILED) {
      if (input.substr(peg$currPos, 16).toLowerCase() === peg$c78) {
        s2 = input.substr(peg$currPos, 16);
        peg$currPos += 16;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }
      if (s2 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c80) {
          s2 = input.substr(peg$currPos, 10);
          peg$currPos += 10;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c81); }
        }
        if (s2 as any === peg$FAILED) {
          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c82) {
            s2 = input.substr(peg$currPos, 9);
            peg$currPos += 9;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c83); }
          }
          if (s2 as any === peg$FAILED) {
            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c84) {
              s2 = input.substr(peg$currPos, 9);
              peg$currPos += 9;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c85); }
            }
            if (s2 as any === peg$FAILED) {
              if (input.substr(peg$currPos, 13).toLowerCase() === peg$c86) {
                s2 = input.substr(peg$currPos, 13);
                peg$currPos += 13;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c87); }
              }
              if (s2 as any === peg$FAILED) {
                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c88) {
                  s2 = input.substr(peg$currPos, 9);
                  peg$currPos += 9;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c89); }
                }
                if (s2 as any === peg$FAILED) {
                  if (input.substr(peg$currPos, 12).toLowerCase() === peg$c90) {
                    s2 = input.substr(peg$currPos, 12);
                    peg$currPos += 12;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c91); }
                  }
                  if (s2 as any === peg$FAILED) {
                    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c92) {
                      s2 = input.substr(peg$currPos, 14);
                      peg$currPos += 14;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c93); }
                    }
                    if (s2 as any === peg$FAILED) {
                      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c94) {
                        s2 = input.substr(peg$currPos, 8);
                        peg$currPos += 8;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c95); }
                      }
                      if (s2 as any === peg$FAILED) {
                        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c96) {
                          s2 = input.substr(peg$currPos, 12);
                          peg$currPos += 12;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c97); }
                        }
                        if (s2 as any === peg$FAILED) {
                          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c98) {
                            s2 = input.substr(peg$currPos, 7);
                            peg$currPos += 7;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c99); }
                          }
                          if (s2 as any === peg$FAILED) {
                            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c100) {
                              s2 = input.substr(peg$currPos, 7);
                              peg$currPos += 7;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c101); }
                            }
                            if (s2 as any === peg$FAILED) {
                              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c102) {
                                s2 = input.substr(peg$currPos, 4);
                                peg$currPos += 4;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c103); }
                              }
                              if (s2 as any === peg$FAILED) {
                                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c104) {
                                  s2 = input.substr(peg$currPos, 2);
                                  peg$currPos += 2;
                                } else {
                                  s2 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c105); }
                                }
                                if (s2 as any === peg$FAILED) {
                                  if (input.substr(peg$currPos, 16).toLowerCase() === peg$c106) {
                                    s2 = input.substr(peg$currPos, 16);
                                    peg$currPos += 16;
                                  } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c107); }
                                  }
                                  if (s2 as any === peg$FAILED) {
                                    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c108) {
                                      s2 = input.substr(peg$currPos, 12);
                                      peg$currPos += 12;
                                    } else {
                                      s2 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c109); }
                                    }
                                    if (s2 as any === peg$FAILED) {
                                      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c110) {
                                        s2 = input.substr(peg$currPos, 10);
                                        peg$currPos += 10;
                                      } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c111); }
                                      }
                                      if (s2 as any === peg$FAILED) {
                                        if (input.substr(peg$currPos, 13).toLowerCase() === peg$c112) {
                                          s2 = input.substr(peg$currPos, 13);
                                          peg$currPos += 13;
                                        } else {
                                          s2 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c113); }
                                        }
                                        if (s2 as any === peg$FAILED) {
                                          if (input.substr(peg$currPos, 14).toLowerCase() === peg$c114) {
                                            s2 = input.substr(peg$currPos, 14);
                                            peg$currPos += 14;
                                          } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                          }
                                          if (s2 as any === peg$FAILED) {
                                            if (input.substr(peg$currPos, 12).toLowerCase() === peg$c116) {
                                              s2 = input.substr(peg$currPos, 12);
                                              peg$currPos += 12;
                                            } else {
                                              s2 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c117); }
                                            }
                                            if (s2 as any === peg$FAILED) {
                                              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c118) {
                                                s2 = input.substr(peg$currPos, 18);
                                                peg$currPos += 18;
                                              } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c119); }
                                              }
                                              if (s2 as any === peg$FAILED) {
                                                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c120) {
                                                  s2 = input.substr(peg$currPos, 5);
                                                  peg$currPos += 5;
                                                } else {
                                                  s2 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c121); }
                                                }
                                                if (s2 as any === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 8).toLowerCase() === peg$c122) {
                                                    s2 = input.substr(peg$currPos, 8);
                                                    peg$currPos += 8;
                                                  } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c123); }
                                                  }
                                                  if (s2 as any === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c124) {
                                                      s2 = input.substr(peg$currPos, 10);
                                                      peg$currPos += 10;
                                                    } else {
                                                      s2 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c125); }
                                                    }
                                                    if (s2 as any === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c126) {
                                                        s2 = input.substr(peg$currPos, 8);
                                                        peg$currPos += 8;
                                                      } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c127); }
                                                      }
                                                      if (s2 as any === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 18).toLowerCase() === peg$c128) {
                                                          s2 = input.substr(peg$currPos, 18);
                                                          peg$currPos += 18;
                                                        } else {
                                                          s2 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c129); }
                                                        }
                                                        if (s2 as any === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c130) {
                                                            s2 = input.substr(peg$currPos, 12);
                                                            peg$currPos += 12;
                                                          } else {
                                                            s2 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c131); }
                                                          }
                                                          if (s2 as any === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 14).toLowerCase() === peg$c132) {
                                                              s2 = input.substr(peg$currPos, 14);
                                                              peg$currPos += 14;
                                                            } else {
                                                              s2 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c133); }
                                                            }
                                                            if (s2 as any === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 10).toLowerCase() === peg$c134) {
                                                                s2 = input.substr(peg$currPos, 10);
                                                                peg$currPos += 10;
                                                              } else {
                                                                s2 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c135); }
                                                              }
                                                              if (s2 as any === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 12).toLowerCase() === peg$c136) {
                                                                  s2 = input.substr(peg$currPos, 12);
                                                                  peg$currPos += 12;
                                                                } else {
                                                                  s2 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c137); }
                                                                }
                                                                if (s2 as any === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 10).toLowerCase() === peg$c138) {
                                                                    s2 = input.substr(peg$currPos, 10);
                                                                    peg$currPos += 10;
                                                                  } else {
                                                                    s2 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c139); }
                                                                  }
                                                                  if (s2 as any === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c140) {
                                                                      s2 = input.substr(peg$currPos, 10);
                                                                      peg$currPos += 10;
                                                                    } else {
                                                                      s2 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$c141); }
                                                                    }
                                                                    if (s2 as any === peg$FAILED) {
                                                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c142) {
                                                                        s2 = input.substr(peg$currPos, 13);
                                                                        peg$currPos += 13;
                                                                      } else {
                                                                        s2 = peg$FAILED;
                                                                        if (peg$silentFails === 0) { peg$fail(peg$c143); }
                                                                      }
                                                                      if (s2 as any === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c144) {
                                                                          s2 = input.substr(peg$currPos, 9);
                                                                          peg$currPos += 9;
                                                                        } else {
                                                                          s2 = peg$FAILED;
                                                                          if (peg$silentFails === 0) { peg$fail(peg$c145); }
                                                                        }
                                                                        if (s2 as any === peg$FAILED) {
                                                                          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c146) {
                                                                            s2 = input.substr(peg$currPos, 8);
                                                                            peg$currPos += 8;
                                                                          } else {
                                                                            s2 = peg$FAILED;
                                                                            if (peg$silentFails === 0) { peg$fail(peg$c147); }
                                                                          }
                                                                          if (s2 as any === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c148) {
                                                                              s2 = input.substr(peg$currPos, 9);
                                                                              peg$currPos += 9;
                                                                            } else {
                                                                              s2 = peg$FAILED;
                                                                              if (peg$silentFails === 0) { peg$fail(peg$c149); }
                                                                            }
                                                                            if (s2 as any === peg$FAILED) {
                                                                              if (input.substr(peg$currPos, 13).toLowerCase() === peg$c150) {
                                                                                s2 = input.substr(peg$currPos, 13);
                                                                                peg$currPos += 13;
                                                                              } else {
                                                                                s2 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c151); }
                                                                              }
                                                                              if (s2 as any === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c152) {
                                                                                  s2 = input.substr(peg$currPos, 4);
                                                                                  peg$currPos += 4;
                                                                                } else {
                                                                                  s2 = peg$FAILED;
                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c153); }
                                                                                }
                                                                                if (s2 as any === peg$FAILED) {
                                                                                  s2 = peg$currPos;
                                                                                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c154) {
                                                                                    s3 = input.substr(peg$currPos, 9);
                                                                                    peg$currPos += 9;
                                                                                  } else {
                                                                                    s3 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c155); }
                                                                                  }
                                                                                  if (s3 as any !== peg$FAILED) {
                                                                                    if (peg$c156.test(input.charAt(peg$currPos))) {
                                                                                      s4 = input.charAt(peg$currPos);
                                                                                      peg$currPos++;
                                                                                    } else {
                                                                                      s4 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c157); }
                                                                                    }
                                                                                    if (s4 as any !== peg$FAILED) {
                                                                                      s3 = [s3, s4];
                                                                                      s2 = s3;
                                                                                    } else {
                                                                                      peg$currPos = s2;
                                                                                      s2 = peg$FAILED;
                                                                                    }
                                                                                  } else {
                                                                                    peg$currPos = s2;
                                                                                    s2 = peg$FAILED;
                                                                                  }
                                                                                  if (s2 as any === peg$FAILED) {
                                                                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c158) {
                                                                                      s2 = input.substr(peg$currPos, 8);
                                                                                      peg$currPos += 8;
                                                                                    } else {
                                                                                      s2 = peg$FAILED;
                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c159); }
                                                                                    }
                                                                                    if (s2 as any === peg$FAILED) {
                                                                                      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c160) {
                                                                                        s2 = input.substr(peg$currPos, 2);
                                                                                        peg$currPos += 2;
                                                                                      } else {
                                                                                        s2 = peg$FAILED;
                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c161); }
                                                                                      }
                                                                                      if (s2 as any === peg$FAILED) {
                                                                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c162) {
                                                                                          s2 = input.substr(peg$currPos, 15);
                                                                                          peg$currPos += 15;
                                                                                        } else {
                                                                                          s2 = peg$FAILED;
                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c163); }
                                                                                        }
                                                                                        if (s2 as any === peg$FAILED) {
                                                                                          if (input.substr(peg$currPos, 14).toLowerCase() === peg$c164) {
                                                                                            s2 = input.substr(peg$currPos, 14);
                                                                                            peg$currPos += 14;
                                                                                          } else {
                                                                                            s2 = peg$FAILED;
                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c165); }
                                                                                          }
                                                                                          if (s2 as any === peg$FAILED) {
                                                                                            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c166) {
                                                                                              s2 = input.substr(peg$currPos, 11);
                                                                                              peg$currPos += 11;
                                                                                            } else {
                                                                                              s2 = peg$FAILED;
                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c167); }
                                                                                            }
                                                                                            if (s2 as any === peg$FAILED) {
                                                                                              if (input.substr(peg$currPos, 11).toLowerCase() === peg$c168) {
                                                                                                s2 = input.substr(peg$currPos, 11);
                                                                                                peg$currPos += 11;
                                                                                              } else {
                                                                                                s2 = peg$FAILED;
                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c169); }
                                                                                              }
                                                                                              if (s2 as any === peg$FAILED) {
                                                                                                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c170) {
                                                                                                  s2 = input.substr(peg$currPos, 4);
                                                                                                  peg$currPos += 4;
                                                                                                } else {
                                                                                                  s2 = peg$FAILED;
                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c171); }
                                                                                                }
                                                                                                if (s2 as any === peg$FAILED) {
                                                                                                  if (input.substr(peg$currPos, 3).toLowerCase() === peg$c172) {
                                                                                                    s2 = input.substr(peg$currPos, 3);
                                                                                                    peg$currPos += 3;
                                                                                                  } else {
                                                                                                    s2 = peg$FAILED;
                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c173); }
                                                                                                  }
                                                                                                  if (s2 as any === peg$FAILED) {
                                                                                                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c174) {
                                                                                                      s2 = input.substr(peg$currPos, 3);
                                                                                                      peg$currPos += 3;
                                                                                                    } else {
                                                                                                      s2 = peg$FAILED;
                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c175); }
                                                                                                    }
                                                                                                    if (s2 as any === peg$FAILED) {
                                                                                                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c176) {
                                                                                                        s2 = input.substr(peg$currPos, 4);
                                                                                                        peg$currPos += 4;
                                                                                                      } else {
                                                                                                        s2 = peg$FAILED;
                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c177); }
                                                                                                      }
                                                                                                      if (s2 as any === peg$FAILED) {
                                                                                                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c178) {
                                                                                                          s2 = input.substr(peg$currPos, 7);
                                                                                                          peg$currPos += 7;
                                                                                                        } else {
                                                                                                          s2 = peg$FAILED;
                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c179); }
                                                                                                        }
                                                                                                        if (s2 as any === peg$FAILED) {
                                                                                                          if (input.substr(peg$currPos, 14).toLowerCase() === peg$c180) {
                                                                                                            s2 = input.substr(peg$currPos, 14);
                                                                                                            peg$currPos += 14;
                                                                                                          } else {
                                                                                                            s2 = peg$FAILED;
                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c181); }
                                                                                                          }
                                                                                                          if (s2 as any === peg$FAILED) {
                                                                                                            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c182) {
                                                                                                              s2 = input.substr(peg$currPos, 9);
                                                                                                              peg$currPos += 9;
                                                                                                            } else {
                                                                                                              s2 = peg$FAILED;
                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c183); }
                                                                                                            }
                                                                                                            if (s2 as any === peg$FAILED) {
                                                                                                              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c184) {
                                                                                                                s2 = input.substr(peg$currPos, 6);
                                                                                                                peg$currPos += 6;
                                                                                                              } else {
                                                                                                                s2 = peg$FAILED;
                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c185); }
                                                                                                              }
                                                                                                              if (s2 as any === peg$FAILED) {
                                                                                                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c186) {
                                                                                                                  s2 = input.substr(peg$currPos, 7);
                                                                                                                  peg$currPos += 7;
                                                                                                                } else {
                                                                                                                  s2 = peg$FAILED;
                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c187); }
                                                                                                                }
                                                                                                                if (s2 as any === peg$FAILED) {
                                                                                                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c188) {
                                                                                                                    s2 = input.substr(peg$currPos, 6);
                                                                                                                    peg$currPos += 6;
                                                                                                                  } else {
                                                                                                                    s2 = peg$FAILED;
                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c189); }
                                                                                                                  }
                                                                                                                  if (s2 as any === peg$FAILED) {
                                                                                                                    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c190) {
                                                                                                                      s2 = input.substr(peg$currPos, 13);
                                                                                                                      peg$currPos += 13;
                                                                                                                    } else {
                                                                                                                      s2 = peg$FAILED;
                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c191); }
                                                                                                                    }
                                                                                                                    if (s2 as any === peg$FAILED) {
                                                                                                                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c192) {
                                                                                                                        s2 = input.substr(peg$currPos, 6);
                                                                                                                        peg$currPos += 6;
                                                                                                                      } else {
                                                                                                                        s2 = peg$FAILED;
                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c193); }
                                                                                                                      }
                                                                                                                      if (s2 as any === peg$FAILED) {
                                                                                                                        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c194) {
                                                                                                                          s2 = input.substr(peg$currPos, 9);
                                                                                                                          peg$currPos += 9;
                                                                                                                        } else {
                                                                                                                          s2 = peg$FAILED;
                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c195); }
                                                                                                                        }
                                                                                                                        if (s2 as any === peg$FAILED) {
                                                                                                                          if (input.substr(peg$currPos, 15).toLowerCase() === peg$c196) {
                                                                                                                            s2 = input.substr(peg$currPos, 15);
                                                                                                                            peg$currPos += 15;
                                                                                                                          } else {
                                                                                                                            s2 = peg$FAILED;
                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c197); }
                                                                                                                          }
                                                                                                                          if (s2 as any === peg$FAILED) {
                                                                                                                            if (input.substr(peg$currPos, 17).toLowerCase() === peg$c198) {
                                                                                                                              s2 = input.substr(peg$currPos, 17);
                                                                                                                              peg$currPos += 17;
                                                                                                                            } else {
                                                                                                                              s2 = peg$FAILED;
                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c199); }
                                                                                                                            }
                                                                                                                            if (s2 as any === peg$FAILED) {
                                                                                                                              if (input.substr(peg$currPos, 11).toLowerCase() === peg$c200) {
                                                                                                                                s2 = input.substr(peg$currPos, 11);
                                                                                                                                peg$currPos += 11;
                                                                                                                              } else {
                                                                                                                                s2 = peg$FAILED;
                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c201); }
                                                                                                                              }
                                                                                                                              if (s2 as any === peg$FAILED) {
                                                                                                                                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c202) {
                                                                                                                                  s2 = input.substr(peg$currPos, 9);
                                                                                                                                  peg$currPos += 9;
                                                                                                                                } else {
                                                                                                                                  s2 = peg$FAILED;
                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c203); }
                                                                                                                                }
                                                                                                                                if (s2 as any === peg$FAILED) {
                                                                                                                                  if (input.substr(peg$currPos, 14).toLowerCase() === peg$c204) {
                                                                                                                                    s2 = input.substr(peg$currPos, 14);
                                                                                                                                    peg$currPos += 14;
                                                                                                                                  } else {
                                                                                                                                    s2 = peg$FAILED;
                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c205); }
                                                                                                                                  }
                                                                                                                                  if (s2 as any === peg$FAILED) {
                                                                                                                                    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c206) {
                                                                                                                                      s2 = input.substr(peg$currPos, 16);
                                                                                                                                      peg$currPos += 16;
                                                                                                                                    } else {
                                                                                                                                      s2 = peg$FAILED;
                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c207); }
                                                                                                                                    }
                                                                                                                                    if (s2 as any === peg$FAILED) {
                                                                                                                                      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c208) {
                                                                                                                                        s2 = input.substr(peg$currPos, 10);
                                                                                                                                        peg$currPos += 10;
                                                                                                                                      } else {
                                                                                                                                        s2 = peg$FAILED;
                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c209); }
                                                                                                                                      }
                                                                                                                                      if (s2 as any === peg$FAILED) {
                                                                                                                                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c210) {
                                                                                                                                          s2 = input.substr(peg$currPos, 3);
                                                                                                                                          peg$currPos += 3;
                                                                                                                                        } else {
                                                                                                                                          s2 = peg$FAILED;
                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c211); }
                                                                                                                                        }
                                                                                                                                        if (s2 as any === peg$FAILED) {
                                                                                                                                          if (input.substr(peg$currPos, 18).toLowerCase() === peg$c212) {
                                                                                                                                            s2 = input.substr(peg$currPos, 18);
                                                                                                                                            peg$currPos += 18;
                                                                                                                                          } else {
                                                                                                                                            s2 = peg$FAILED;
                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c213); }
                                                                                                                                          }
                                                                                                                                          if (s2 as any === peg$FAILED) {
                                                                                                                                            if (input.substr(peg$currPos, 12).toLowerCase() === peg$c214) {
                                                                                                                                              s2 = input.substr(peg$currPos, 12);
                                                                                                                                              peg$currPos += 12;
                                                                                                                                            } else {
                                                                                                                                              s2 = peg$FAILED;
                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c215); }
                                                                                                                                            }
                                                                                                                                            if (s2 as any === peg$FAILED) {
                                                                                                                                              if (input.substr(peg$currPos, 16).toLowerCase() === peg$c216) {
                                                                                                                                                s2 = input.substr(peg$currPos, 16);
                                                                                                                                                peg$currPos += 16;
                                                                                                                                              } else {
                                                                                                                                                s2 = peg$FAILED;
                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c217); }
                                                                                                                                              }
                                                                                                                                              if (s2 as any === peg$FAILED) {
                                                                                                                                                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c218) {
                                                                                                                                                  s2 = input.substr(peg$currPos, 10);
                                                                                                                                                  peg$currPos += 10;
                                                                                                                                                } else {
                                                                                                                                                  s2 = peg$FAILED;
                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c219); }
                                                                                                                                                }
                                                                                                                                                if (s2 as any === peg$FAILED) {
                                                                                                                                                  if (input.substr(peg$currPos, 10).toLowerCase() === peg$c220) {
                                                                                                                                                    s2 = input.substr(peg$currPos, 10);
                                                                                                                                                    peg$currPos += 10;
                                                                                                                                                  } else {
                                                                                                                                                    s2 = peg$FAILED;
                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c221); }
                                                                                                                                                  }
                                                                                                                                                  if (s2 as any === peg$FAILED) {
                                                                                                                                                    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c222) {
                                                                                                                                                      s2 = input.substr(peg$currPos, 9);
                                                                                                                                                      peg$currPos += 9;
                                                                                                                                                    } else {
                                                                                                                                                      s2 = peg$FAILED;
                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c223); }
                                                                                                                                                    }
                                                                                                                                                    if (s2 as any === peg$FAILED) {
                                                                                                                                                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c224) {
                                                                                                                                                        s2 = input.substr(peg$currPos, 7);
                                                                                                                                                        peg$currPos += 7;
                                                                                                                                                      } else {
                                                                                                                                                        s2 = peg$FAILED;
                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c225); }
                                                                                                                                                      }
                                                                                                                                                      if (s2 as any === peg$FAILED) {
                                                                                                                                                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c226) {
                                                                                                                                                          s2 = input.substr(peg$currPos, 7);
                                                                                                                                                          peg$currPos += 7;
                                                                                                                                                        } else {
                                                                                                                                                          s2 = peg$FAILED;
                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c227); }
                                                                                                                                                        }
                                                                                                                                                        if (s2 as any === peg$FAILED) {
                                                                                                                                                          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c228) {
                                                                                                                                                            s2 = input.substr(peg$currPos, 11);
                                                                                                                                                            peg$currPos += 11;
                                                                                                                                                          } else {
                                                                                                                                                            s2 = peg$FAILED;
                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c229); }
                                                                                                                                                          }
                                                                                                                                                          if (s2 as any === peg$FAILED) {
                                                                                                                                                            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c230) {
                                                                                                                                                              s2 = input.substr(peg$currPos, 11);
                                                                                                                                                              peg$currPos += 11;
                                                                                                                                                            } else {
                                                                                                                                                              s2 = peg$FAILED;
                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c231); }
                                                                                                                                                            }
                                                                                                                                                            if (s2 as any === peg$FAILED) {
                                                                                                                                                              if (input.substr(peg$currPos, 10).toLowerCase() === peg$c232) {
                                                                                                                                                                s2 = input.substr(peg$currPos, 10);
                                                                                                                                                                peg$currPos += 10;
                                                                                                                                                              } else {
                                                                                                                                                                s2 = peg$FAILED;
                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c233); }
                                                                                                                                                              }
                                                                                                                                                              if (s2 as any === peg$FAILED) {
                                                                                                                                                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c234) {
                                                                                                                                                                  s2 = input.substr(peg$currPos, 7);
                                                                                                                                                                  peg$currPos += 7;
                                                                                                                                                                } else {
                                                                                                                                                                  s2 = peg$FAILED;
                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c235); }
                                                                                                                                                                }
                                                                                                                                                                if (s2 as any === peg$FAILED) {
                                                                                                                                                                  if (input.substr(peg$currPos, 14).toLowerCase() === peg$c236) {
                                                                                                                                                                    s2 = input.substr(peg$currPos, 14);
                                                                                                                                                                    peg$currPos += 14;
                                                                                                                                                                  } else {
                                                                                                                                                                    s2 = peg$FAILED;
                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c237); }
                                                                                                                                                                  }
                                                                                                                                                                  if (s2 as any === peg$FAILED) {
                                                                                                                                                                    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c238) {
                                                                                                                                                                      s2 = input.substr(peg$currPos, 16);
                                                                                                                                                                      peg$currPos += 16;
                                                                                                                                                                    } else {
                                                                                                                                                                      s2 = peg$FAILED;
                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c239); }
                                                                                                                                                                    }
                                                                                                                                                                    if (s2 as any === peg$FAILED) {
                                                                                                                                                                      if (input.substr(peg$currPos, 16).toLowerCase() === peg$c240) {
                                                                                                                                                                        s2 = input.substr(peg$currPos, 16);
                                                                                                                                                                        peg$currPos += 16;
                                                                                                                                                                      } else {
                                                                                                                                                                        s2 = peg$FAILED;
                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c241); }
                                                                                                                                                                      }
                                                                                                                                                                      if (s2 as any === peg$FAILED) {
                                                                                                                                                                        if (input.substr(peg$currPos, 18).toLowerCase() === peg$c242) {
                                                                                                                                                                          s2 = input.substr(peg$currPos, 18);
                                                                                                                                                                          peg$currPos += 18;
                                                                                                                                                                        } else {
                                                                                                                                                                          s2 = peg$FAILED;
                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c243); }
                                                                                                                                                                        }
                                                                                                                                                                        if (s2 as any === peg$FAILED) {
                                                                                                                                                                          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c244) {
                                                                                                                                                                            s2 = input.substr(peg$currPos, 9);
                                                                                                                                                                            peg$currPos += 9;
                                                                                                                                                                          } else {
                                                                                                                                                                            s2 = peg$FAILED;
                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c245); }
                                                                                                                                                                          }
                                                                                                                                                                          if (s2 as any === peg$FAILED) {
                                                                                                                                                                            if (input.substr(peg$currPos, 17).toLowerCase() === peg$c246) {
                                                                                                                                                                              s2 = input.substr(peg$currPos, 17);
                                                                                                                                                                              peg$currPos += 17;
                                                                                                                                                                            } else {
                                                                                                                                                                              s2 = peg$FAILED;
                                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c247); }
                                                                                                                                                                            }
                                                                                                                                                                            if (s2 as any === peg$FAILED) {
                                                                                                                                                                              if (input.substr(peg$currPos, 13).toLowerCase() === peg$c248) {
                                                                                                                                                                                s2 = input.substr(peg$currPos, 13);
                                                                                                                                                                                peg$currPos += 13;
                                                                                                                                                                              } else {
                                                                                                                                                                                s2 = peg$FAILED;
                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c249); }
                                                                                                                                                                              }
                                                                                                                                                                              if (s2 as any === peg$FAILED) {
                                                                                                                                                                                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c250) {
                                                                                                                                                                                  s2 = input.substr(peg$currPos, 9);
                                                                                                                                                                                  peg$currPos += 9;
                                                                                                                                                                                } else {
                                                                                                                                                                                  s2 = peg$FAILED;
                                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c251); }
                                                                                                                                                                                }
                                                                                                                                                                                if (s2 as any === peg$FAILED) {
                                                                                                                                                                                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c252) {
                                                                                                                                                                                    s2 = input.substr(peg$currPos, 9);
                                                                                                                                                                                    peg$currPos += 9;
                                                                                                                                                                                  } else {
                                                                                                                                                                                    s2 = peg$FAILED;
                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c253); }
                                                                                                                                                                                  }
                                                                                                                                                                                  if (s2 as any === peg$FAILED) {
                                                                                                                                                                                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c254) {
                                                                                                                                                                                      s2 = input.substr(peg$currPos, 3);
                                                                                                                                                                                      peg$currPos += 3;
                                                                                                                                                                                    } else {
                                                                                                                                                                                      s2 = peg$FAILED;
                                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c255); }
                                                                                                                                                                                    }
                                                                                                                                                                                    if (s2 as any === peg$FAILED) {
                                                                                                                                                                                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c256) {
                                                                                                                                                                                        s2 = input.substr(peg$currPos, 7);
                                                                                                                                                                                        peg$currPos += 7;
                                                                                                                                                                                      } else {
                                                                                                                                                                                        s2 = peg$FAILED;
                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c257); }
                                                                                                                                                                                      }
                                                                                                                                                                                      if (s2 as any === peg$FAILED) {
                                                                                                                                                                                        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c258) {
                                                                                                                                                                                          s2 = input.substr(peg$currPos, 7);
                                                                                                                                                                                          peg$currPos += 7;
                                                                                                                                                                                        } else {
                                                                                                                                                                                          s2 = peg$FAILED;
                                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c259); }
                                                                                                                                                                                        }
                                                                                                                                                                                        if (s2 as any === peg$FAILED) {
                                                                                                                                                                                          if (input.substr(peg$currPos, 16).toLowerCase() === peg$c260) {
                                                                                                                                                                                            s2 = input.substr(peg$currPos, 16);
                                                                                                                                                                                            peg$currPos += 16;
                                                                                                                                                                                          } else {
                                                                                                                                                                                            s2 = peg$FAILED;
                                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c261); }
                                                                                                                                                                                          }
                                                                                                                                                                                          if (s2 as any === peg$FAILED) {
                                                                                                                                                                                            if (input.substr(peg$currPos, 15).toLowerCase() === peg$c262) {
                                                                                                                                                                                              s2 = input.substr(peg$currPos, 15);
                                                                                                                                                                                              peg$currPos += 15;
                                                                                                                                                                                            } else {
                                                                                                                                                                                              s2 = peg$FAILED;
                                                                                                                                                                                              if (peg$silentFails === 0) { peg$fail(peg$c263); }
                                                                                                                                                                                            }
                                                                                                                                                                                            if (s2 as any === peg$FAILED) {
                                                                                                                                                                                              if (input.substr(peg$currPos, 8).toLowerCase() === peg$c264) {
                                                                                                                                                                                                s2 = input.substr(peg$currPos, 8);
                                                                                                                                                                                                peg$currPos += 8;
                                                                                                                                                                                              } else {
                                                                                                                                                                                                s2 = peg$FAILED;
                                                                                                                                                                                                if (peg$silentFails === 0) { peg$fail(peg$c265); }
                                                                                                                                                                                              }
                                                                                                                                                                                              if (s2 as any === peg$FAILED) {
                                                                                                                                                                                                if (input.substr(peg$currPos, 14).toLowerCase() === peg$c266) {
                                                                                                                                                                                                  s2 = input.substr(peg$currPos, 14);
                                                                                                                                                                                                  peg$currPos += 14;
                                                                                                                                                                                                } else {
                                                                                                                                                                                                  s2 = peg$FAILED;
                                                                                                                                                                                                  if (peg$silentFails === 0) { peg$fail(peg$c267); }
                                                                                                                                                                                                }
                                                                                                                                                                                                if (s2 as any === peg$FAILED) {
                                                                                                                                                                                                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c268) {
                                                                                                                                                                                                    s2 = input.substr(peg$currPos, 4);
                                                                                                                                                                                                    peg$currPos += 4;
                                                                                                                                                                                                  } else {
                                                                                                                                                                                                    s2 = peg$FAILED;
                                                                                                                                                                                                    if (peg$silentFails === 0) { peg$fail(peg$c269); }
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (s2 as any === peg$FAILED) {
                                                                                                                                                                                                    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c270) {
                                                                                                                                                                                                      s2 = input.substr(peg$currPos, 10);
                                                                                                                                                                                                      peg$currPos += 10;
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                      s2 = peg$FAILED;
                                                                                                                                                                                                      if (peg$silentFails === 0) { peg$fail(peg$c271); }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (s2 as any === peg$FAILED) {
                                                                                                                                                                                                      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c272) {
                                                                                                                                                                                                        s2 = input.substr(peg$currPos, 10);
                                                                                                                                                                                                        peg$currPos += 10;
                                                                                                                                                                                                      } else {
                                                                                                                                                                                                        s2 = peg$FAILED;
                                                                                                                                                                                                        if (peg$silentFails === 0) { peg$fail(peg$c273); }
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (s2 as any === peg$FAILED) {
                                                                                                                                                                                                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c274) {
                                                                                                                                                                                                          s2 = input.substr(peg$currPos, 4);
                                                                                                                                                                                                          peg$currPos += 4;
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                          s2 = peg$FAILED;
                                                                                                                                                                                                          if (peg$silentFails === 0) { peg$fail(peg$c275); }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if (s2 as any === peg$FAILED) {
                                                                                                                                                                                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c276) {
                                                                                                                                                                                                            s2 = input.substr(peg$currPos, 4);
                                                                                                                                                                                                            peg$currPos += 4;
                                                                                                                                                                                                          } else {
                                                                                                                                                                                                            s2 = peg$FAILED;
                                                                                                                                                                                                            if (peg$silentFails === 0) { peg$fail(peg$c277); }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseIdentifierPart();
        peg$silentFails--;
        if (s4 as any === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNullLiteral(): any {
    let s0, s1;

    const key = peg$currPos * 158 + 30;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseNullToken();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c278();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseReservedWord(): any {
    let s0;

    const key = peg$currPos * 158 + 31;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseKeyword();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseFutureReservedWord();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseNullLiteral();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseBooleanLiteral();
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseKeyword(): any {
    let s0;

    const key = peg$currPos * 158 + 32;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseAndToken();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseByRefToken();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseCaseToken();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseConstToken();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parseContinueCaseToken();
            if (s0 as any === peg$FAILED) {
              s0 = peg$parseContinueLoopToken();
              if (s0 as any === peg$FAILED) {
                s0 = peg$parseDefaultToken();
                if (s0 as any === peg$FAILED) {
                  s0 = peg$parseDimToken();
                  if (s0 as any === peg$FAILED) {
                    s0 = peg$parseDoToken();
                    if (s0 as any === peg$FAILED) {
                      s0 = peg$parseElseToken();
                      if (s0 as any === peg$FAILED) {
                        s0 = peg$parseElseIfToken();
                        if (s0 as any === peg$FAILED) {
                          s0 = peg$parseEndFuncToken();
                          if (s0 as any === peg$FAILED) {
                            s0 = peg$parseEndIfToken();
                            if (s0 as any === peg$FAILED) {
                              s0 = peg$parseEndSelectToken();
                              if (s0 as any === peg$FAILED) {
                                s0 = peg$parseEndSwitchToken();
                                if (s0 as any === peg$FAILED) {
                                  s0 = peg$parseEndWithToken();
                                  if (s0 as any === peg$FAILED) {
                                    s0 = peg$parseEnumToken();
                                    if (s0 as any === peg$FAILED) {
                                      s0 = peg$parseExitToken();
                                      if (s0 as any === peg$FAILED) {
                                        s0 = peg$parseExitLoopToken();
                                        if (s0 as any === peg$FAILED) {
                                          s0 = peg$parseForToken();
                                          if (s0 as any === peg$FAILED) {
                                            s0 = peg$parseFuncToken();
                                            if (s0 as any === peg$FAILED) {
                                              s0 = peg$parseGlobalToken();
                                              if (s0 as any === peg$FAILED) {
                                                s0 = peg$parseIfToken();
                                                if (s0 as any === peg$FAILED) {
                                                  s0 = peg$parseInToken();
                                                  if (s0 as any === peg$FAILED) {
                                                    s0 = peg$parseLocalToken();
                                                    if (s0 as any === peg$FAILED) {
                                                      s0 = peg$parseNextToken();
                                                      if (s0 as any === peg$FAILED) {
                                                        s0 = peg$parseNotToken();
                                                        if (s0 as any === peg$FAILED) {
                                                          s0 = peg$parseOrToken();
                                                          if (s0 as any === peg$FAILED) {
                                                            s0 = peg$parseRedimToken();
                                                            if (s0 as any === peg$FAILED) {
                                                              s0 = peg$parseReturnToken();
                                                              if (s0 as any === peg$FAILED) {
                                                                s0 = peg$parseSelectToken();
                                                                if (s0 as any === peg$FAILED) {
                                                                  s0 = peg$parseStaticToken();
                                                                  if (s0 as any === peg$FAILED) {
                                                                    s0 = peg$parseStepToken();
                                                                    if (s0 as any === peg$FAILED) {
                                                                      s0 = peg$parseSwitchToken();
                                                                      if (s0 as any === peg$FAILED) {
                                                                        s0 = peg$parseThenToken();
                                                                        if (s0 as any === peg$FAILED) {
                                                                          s0 = peg$parseToToken();
                                                                          if (s0 as any === peg$FAILED) {
                                                                            s0 = peg$parseUntilToken();
                                                                            if (s0 as any === peg$FAILED) {
                                                                              s0 = peg$parseVolatileToken();
                                                                              if (s0 as any === peg$FAILED) {
                                                                                s0 = peg$parseWEndToken();
                                                                                if (s0 as any === peg$FAILED) {
                                                                                  s0 = peg$parseWhileToken();
                                                                                  if (s0 as any === peg$FAILED) {
                                                                                    s0 = peg$parseWithToken();
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFutureReservedWord(): any {
    let s0;

    const key = peg$currPos * 158 + 33;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 9) === peg$c279) {
      s0 = peg$c279;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c280); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseWithStatement(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 158 + 34;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseWithToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseExpression();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseEOS();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseStatementList();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseEndWithToken();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseEOS();
              if (s6 as any !== peg$FAILED) {
                s1 = [s1, s2, s3, s4, s5, s6];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseReturnStatement(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 35;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseReturnToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseExpression();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseEOS();
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExitLoopStatement(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 36;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseExitLoopToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseExpression();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseEOS();
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseContinueLoopStatement(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 37;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseContinueLoopToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseExpression();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseEOS();
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseContinueCaseStatement(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 38;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseContinueCaseToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseExpression();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseEOS();
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSelectStatement(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 39;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSelectToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseEOS();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseEmptyStatement();
        if (s4 as any === peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse__();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parseSingleLineComment();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseEOS();
              if (s7 as any !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseEmptyStatement();
          if (s4 as any === peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parse__();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseSingleLineComment();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseEOS();
                if (s7 as any !== peg$FAILED) {
                  s5 = [s5, s6, s7];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseSelectCaseBlock();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseEndSelectToken();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseEOS();
              if (s6 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c281(s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSelectCaseBlock(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 40;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseSelectCaseClauses();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseDefaultClause();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseSelectCaseClauses();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 as any !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c282(s2, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseSelectCaseClauses();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 as any === peg$FAILED) {
          s2 = null;
        }
        if (s2 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c283(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSelectCaseClauses(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 158 + 41;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSelectCaseClause();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseSelectCaseClause();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseSelectCaseClause();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c284(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSelectCaseClause(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 42;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCaseToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseAssignmentExpression();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseEOS();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseStatementList();
              if (s7 as any !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c285(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBooleanLiteral(): any {
    let s0, s1;

    const key = peg$currPos * 158 + 43;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseTrueToken();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c286();
    }
    s0 = s1;
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseFalseToken();
      if (s1 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c287();
      }
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLiteral(): any {
    let s0;

    const key = peg$currPos * 158 + 44;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseNullLiteral();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseBooleanLiteral();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseNumericLiteral();
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseStringLiteral();
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAndToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 45;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c288) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c289); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseByRefToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 46;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c290) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c291); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCaseToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 47;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c292) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c293); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCEToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 48;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c294) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c295); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCommentsStartToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 49;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c296) {
      s1 = input.substr(peg$currPos, 14);
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c297); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCommentsEndToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 50;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c298) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c299); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseConstToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 51;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c300) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c301); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseContinueCaseToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 52;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c302) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c303); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseContinueLoopToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 53;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c304) {
      s1 = input.substr(peg$currPos, 12);
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c305); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCSToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 54;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c306) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c307); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDefaultToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 55;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c308) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c309); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDimToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 56;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c310) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c311); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDoToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 57;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c312) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c313); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseElseToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 58;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c314) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c315); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseElseIfToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 59;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c316) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c317); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEndFuncToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 60;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c318) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c319); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEndIfToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 61;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c320) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c321); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEndSelectToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 62;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c322) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c323); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEndSwitchToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 63;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c324) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c325); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEndWithToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 64;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c326) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c327); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEnumToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 65;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c328) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c329); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExitToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 66;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c330) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c331); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExitLoopToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 67;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c332) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c333); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFalseToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 68;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c334) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c335); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseForToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 69;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c336) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c337); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFuncToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 70;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c338) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c339); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseGlobalToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 71;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c340) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c341); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIfToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 72;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c342) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c343); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseInToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 73;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c344) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c345); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLocalToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 74;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c346) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c347); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNextToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 75;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c348) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c349); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNullToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 76;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c350) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c351); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNotToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 77;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c352) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c353); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseOrToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 78;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c354) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c355); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRedimToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 79;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c356) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c357); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseReturnToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 80;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c358) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c359); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSelectToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 81;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c360) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c361); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseStaticToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 82;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c362) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c363); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseStepToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 83;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c364) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c365); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSwitchToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 84;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c366) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c367); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseThenToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 85;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c368) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c369); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseToToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 86;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c370) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c371); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseUntilToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 87;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c372) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c373); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseVolatileToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 88;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c374) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c375); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseTrueToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 89;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c376) {
      s1 = peg$c376;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c377); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseWEndToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 90;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c378) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c379); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseWhileToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 91;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c380) {
      s1 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c381); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseWithToken(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 92;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c382) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c383); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierPart();
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLetter(): any {
    let s0;

    const key = peg$currPos * 158 + 93;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c384.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c385); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNumericLiteral(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 94;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parseHexIntegerLiteral();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      peg$silentFails++;
      s3 = peg$parseIdentifierStart();
      if (s3 as any === peg$FAILED) {
        s3 = peg$parseDecimalDigit();
      }
      peg$silentFails--;
      if (s3 as any === peg$FAILED) {
        s2 = undefined;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c387(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseDecimalLiteral();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseIdentifierStart();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseDecimalDigit();
        }
        peg$silentFails--;
        if (s3 as any === peg$FAILED) {
          s2 = undefined;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c387(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c386); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDecimalDigit(): any {
    let s0;

    const key = peg$currPos * 158 + 95;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c54.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c55); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNonZeroDigit(): any {
    let s0;

    const key = peg$currPos * 158 + 96;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$c388.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c389); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDecimalLiteral(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 97;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseDecimalIntegerLiteral();
    if (s1 as any !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c390;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c391); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseDecimalDigit();
        while (s4 as any !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDecimalDigit();
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseExponentPart();
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c392();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c390;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c391); }
      }
      if (s1 as any !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDecimalDigit();
        if (s3 as any !== peg$FAILED) {
          while (s3 as any !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDecimalDigit();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parseExponentPart();
          if (s3 as any === peg$FAILED) {
            s3 = null;
          }
          if (s3 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c392();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDecimalIntegerLiteral();
        if (s1 as any !== peg$FAILED) {
          s2 = peg$parseExponentPart();
          if (s2 as any === peg$FAILED) {
            s2 = null;
          }
          if (s2 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c392();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDecimalIntegerLiteral(): any {
    let s0, s1;

    const key = peg$currPos * 158 + 98;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    s1 = peg$parseDecimalDigit();
    if (s1 as any !== peg$FAILED) {
      while (s1 as any !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parseDecimalDigit();
      }
    } else {
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExponentPart(): any {
    let s0, s1, s2;

    const key = peg$currPos * 158 + 99;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseExponentIndicator();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSignedInteger();
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExponentIndicator(): any {
    let s0;

    const key = peg$currPos * 158 + 100;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c393) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c394); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSignedInteger(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 101;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (peg$c395.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c396); }
    }
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDecimalDigit();
      if (s3 as any !== peg$FAILED) {
        while (s3 as any !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDecimalDigit();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMemberExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 158 + 102;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsePrimaryExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s5 = peg$c33;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseExpression();
            if (s7 as any !== peg$FAILED) {
              s8 = peg$parse__();
              if (s8 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s9 = peg$c35;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c36); }
                }
                if (s9 as any !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c397(s1, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any === peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c390;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c391); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseIdentifierName();
              if (s7 as any !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c398(s1, s7);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s5 = peg$c33;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseExpression();
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parse__();
                if (s8 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s9 = peg$c35;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c36); }
                  }
                  if (s9 as any !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c397(s1, s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c390;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c391); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseIdentifierName();
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c398(s1, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c399(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseMacro();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePrimaryExpression(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 158 + 103;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseIdentifier();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseVariableIdentifier();
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseLiteral();
        if (s0 as any === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c400;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c401); }
          }
          if (s1 as any !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 as any !== peg$FAILED) {
              s3 = peg$parseExpression();
              if (s3 as any !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s5 = peg$c402;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c403); }
                  }
                  if (s5 as any !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c41(s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 as any === peg$FAILED) {
            s0 = peg$parseDefaultToken();
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCallExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 158 + 104;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseMemberExpression();
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseArguments();
        if (s4 as any !== peg$FAILED) {
          peg$savedPos = s1;
          s2 = peg$c404(s2, s4);
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseArguments();
        if (s5 as any !== peg$FAILED) {
          peg$savedPos = s3;
          s4 = peg$c405(s1, s5);
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any === peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s5 = peg$c33;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseExpression();
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parse__();
                if (s8 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s9 = peg$c35;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c36); }
                  }
                  if (s9 as any !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c406(s1, s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s5 = peg$c390;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c391); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseIdentifierName();
                if (s7 as any !== peg$FAILED) {
                  peg$savedPos = s3;
                  s4 = peg$c407(s1, s7);
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseArguments();
          if (s5 as any !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c405(s1, s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s5 = peg$c33;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseExpression();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 as any !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s9 = peg$c35;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c36); }
                    }
                    if (s9 as any !== peg$FAILED) {
                      peg$savedPos = s3;
                      s4 = peg$c406(s1, s7);
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 as any === peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse__();
            if (s4 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s5 = peg$c390;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c391); }
              }
              if (s5 as any !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 as any !== peg$FAILED) {
                  s7 = peg$parseIdentifierName();
                  if (s7 as any !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c407(s1, s7);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c408(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseArguments(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 158 + 105;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c400;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c401); }
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseArgumentList();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c402;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c403); }
          }
          if (s4 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c409(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseArgumentList(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 106;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseAssignmentExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c30;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseAssignmentExpression();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c30;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseAssignmentExpression();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c32(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLeftHandSideExpression(): any {
    let s0;

    const key = peg$currPos * 158 + 107;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseCallExpression();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseMemberExpression();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAssignmentExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6;

    const key = peg$currPos * 158 + 108;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseLeftHandSideExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c38;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 61) {
            s5 = peg$c38;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c39); }
          }
          peg$silentFails--;
          if (s5 as any === peg$FAILED) {
            s4 = undefined;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseAssignmentExpression();
              if (s6 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c410(s1, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLeftHandSideExpression();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parseAssignmentOperator();
          if (s3 as any !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 as any !== peg$FAILED) {
              s5 = peg$parseAssignmentExpression();
              if (s5 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c411(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$parseConditionalExpression();
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAssignmentOperator(): any {
    let s0;

    const key = peg$currPos * 158 + 109;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 2) === peg$c412) {
      s0 = peg$c412;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c413); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c414) {
        s0 = peg$c414;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c415); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c416) {
          s0 = peg$c416;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c417); }
        }
        if (s0 as any === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c418) {
            s0 = peg$c418;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c419); }
          }
          if (s0 as any === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c420) {
              s0 = peg$c420;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c421); }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseConditionalExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 158 + 110;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseLogicalORExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s3 = peg$c422;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c423); }
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseAssignmentExpression();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s7 = peg$c424;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c425); }
                }
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseAssignmentExpression();
                    if (s9 as any !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c426(s1, s5, s9);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseLogicalORExpression();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLogicalORExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 111;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseLogicalANDExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseOrToken();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseLogicalANDExpression();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseOrToken();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseLogicalANDExpression();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c427(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLogicalANDExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 112;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseNotExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseLogicalANDOperator();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseNotExpression();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseLogicalANDOperator();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseNotExpression();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c427(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLogicalANDOperator(): any {
    let s0, s1, s2;

    const key = peg$currPos * 158 + 113;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseAndToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseWhitespace();
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNotExpression(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 114;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseNotToken();
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseEqualityExpression();
      if (s2 as any !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseEqualityExpression();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEqualityExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 115;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseRelationalExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseEqualityOperator();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseRelationalExpression();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseEqualityOperator();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseRelationalExpression();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c428(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEqualityOperator(): any {
    let s0;

    const key = peg$currPos * 158 + 116;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 2) === peg$c429) {
      s0 = peg$c429;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c430); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c38;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRelationalExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 117;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseAdditiveExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseRelationalOperator();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseAdditiveExpression();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseRelationalOperator();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseAdditiveExpression();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c428(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAdditiveExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 118;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseMultiplicativeExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseAdditiveOperator();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseMultiplicativeExpression();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseAdditiveOperator();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseMultiplicativeExpression();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c428(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseAdditiveOperator(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 119;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s2 = peg$c431;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c432); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (peg$c433.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c434); }
      }
      peg$silentFails--;
      if (s4 as any === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c435;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c436); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (peg$c437.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c438); }
        }
        peg$silentFails--;
        if (s4 as any === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 as any !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 38) {
          s2 = peg$c439;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c440); }
        }
        if (s2 as any !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (peg$c441.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c442); }
          }
          peg$silentFails--;
          if (s4 as any === peg$FAILED) {
            s3 = undefined;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 as any !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 as any !== peg$FAILED) {
          s0 = input.substring(s0, peg$currPos);
        } else {
          s0 = s1;
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRelationalOperator(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 120;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.substr(peg$currPos, 2) === peg$c443) {
      s0 = peg$c443;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c444); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c445) {
        s0 = peg$c445;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c446); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c447) {
          s0 = peg$c447;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c448); }
        }
        if (s0 as any === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 60) {
            s2 = peg$c11;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s2 as any !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 60) {
              s4 = peg$c11;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            peg$silentFails--;
            if (s4 as any === peg$FAILED) {
              s3 = undefined;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 as any !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 as any !== peg$FAILED) {
            s0 = input.substring(s0, peg$currPos);
          } else {
            s0 = s1;
          }
          if (s0 as any === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 62) {
              s2 = peg$c15;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c16); }
            }
            if (s2 as any !== peg$FAILED) {
              s3 = peg$currPos;
              peg$silentFails++;
              if (input.charCodeAt(peg$currPos) === 62) {
                s4 = peg$c15;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              peg$silentFails--;
              if (s4 as any === peg$FAILED) {
                s3 = undefined;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 as any !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
            if (s1 as any !== peg$FAILED) {
              s0 = input.substring(s0, peg$currPos);
            } else {
              s0 = s1;
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMultiplicativeExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 121;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseExponentialExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseMultiplicativeOperator();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseExponentialExpression();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseMultiplicativeOperator();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseExponentialExpression();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c428(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseMultiplicativeOperator(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 122;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 42) {
      s2 = peg$c449;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c450); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c38;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      peg$silentFails--;
      if (s4 as any === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c451;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c452); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c38;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        peg$silentFails--;
        if (s4 as any === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 as any !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExponentialExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 123;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseUnaryExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseExponentialOperator();
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseUnaryExpression();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseExponentialOperator();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseUnaryExpression();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c428(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExponentialOperator(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 124;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s2 = peg$c453;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c454); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c38;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      peg$silentFails--;
      if (s4 as any === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseUnaryExpression(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 125;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseLeftHandSideExpression();
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseUnaryOperator();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parseUnaryExpression();
          if (s3 as any !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c455(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseUnaryOperator(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 126;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 43) {
      s2 = peg$c431;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c432); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 61) {
        s4 = peg$c38;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c39); }
      }
      peg$silentFails--;
      if (s4 as any === peg$FAILED) {
        s3 = undefined;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c435;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c436); }
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        peg$silentFails++;
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c38;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        peg$silentFails--;
        if (s4 as any === peg$FAILED) {
          s3 = undefined;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 as any !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseProgram(): any {
    let s0, s1;

    const key = peg$currPos * 158 + 127;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSourceElements();
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c456(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSourceElements(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 158 + 128;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSourceElement();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseSourceElement();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseSourceElement();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c457(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSourceElement(): any {
    let s0;

    const key = peg$currPos * 158 + 129;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseStatement();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseFunctionDeclaration();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsePreProcStatement(): any {
    let s0, s1, s2;

    const key = peg$currPos * 158 + 130;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsePreProc();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseEOS();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c458(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFunctionDeclaration(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    const key = peg$currPos * 158 + 131;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c459) {
      s2 = peg$c459;
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c460); }
    }
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseFuncToken();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseIdentifier();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 as any !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s6 = peg$c400;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c401); }
              }
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parseFormalParameterList();
                  if (s9 as any !== peg$FAILED) {
                    s10 = peg$parse__();
                    if (s10 as any !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 as any === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 as any !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s10 = peg$c402;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c403); }
                      }
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parseEOS();
                        if (s11 as any !== peg$FAILED) {
                          s12 = peg$parse__();
                          if (s12 as any !== peg$FAILED) {
                            s13 = peg$parseStatementList();
                            if (s13 as any === peg$FAILED) {
                              s13 = null;
                            }
                            if (s13 as any !== peg$FAILED) {
                              s14 = peg$parse__();
                              if (s14 as any !== peg$FAILED) {
                                s15 = peg$parseEndFuncToken();
                                if (s15 as any !== peg$FAILED) {
                                  s16 = peg$parseEOS();
                                  if (s16 as any !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c461(s4, s8, s13);
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFormalParameterList(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 132;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseFormalParameter();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c30;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseFormalParameter();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c30;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseFormalParameter();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c32(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFormalParameter(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 158 + 133;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseConstToken();
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseByRefToken();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseVariableIdentifier();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 61) {
                s7 = peg$c38;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c39); }
              }
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parse__();
                if (s8 as any !== peg$FAILED) {
                  s9 = peg$parseExpression();
                  if (s9 as any !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 as any === peg$FAILED) {
                s6 = null;
              }
              if (s6 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c462(s1, s4, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseByRefToken();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 as any !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 as any === peg$FAILED) {
        s1 = null;
      }
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseConstToken();
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 as any !== peg$FAILED) {
            s4 = peg$parseVariableIdentifier();
            if (s4 as any !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 as any !== peg$FAILED) {
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 61) {
                  s7 = peg$c38;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c39); }
                }
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseExpression();
                    if (s9 as any !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 as any === peg$FAILED) {
                  s6 = null;
                }
                if (s6 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c463(s1, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseVariableIdentifier();
        if (s1 as any !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 as any !== peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 61) {
              s4 = peg$c38;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c39); }
            }
            if (s4 as any !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 as any !== peg$FAILED) {
                s6 = peg$parseExpression();
                if (s6 as any !== peg$FAILED) {
                  s4 = [s4, s5, s6];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 as any === peg$FAILED) {
              s3 = null;
            }
            if (s3 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c464(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseStatement(): any {
    let s0, s1, s2;

    const key = peg$currPos * 158 + 134;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseVariableStatement();
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseEmptyStatement();
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseSingleLineComment();
        if (s1 as any !== peg$FAILED) {
          s2 = peg$parseEOS();
          if (s2 as any !== peg$FAILED) {
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 as any === peg$FAILED) {
          s0 = peg$parseExpressionStatement();
          if (s0 as any === peg$FAILED) {
            s0 = peg$parseIfStatement();
            if (s0 as any === peg$FAILED) {
              s0 = peg$parseIterationStatement();
              if (s0 as any === peg$FAILED) {
                s0 = peg$parseContinueLoopStatement();
                if (s0 as any === peg$FAILED) {
                  s0 = peg$parseContinueCaseStatement();
                  if (s0 as any === peg$FAILED) {
                    s0 = peg$parseExitLoopStatement();
                    if (s0 as any === peg$FAILED) {
                      s0 = peg$parseReturnStatement();
                      if (s0 as any === peg$FAILED) {
                        s0 = peg$parseWithStatement();
                        if (s0 as any === peg$FAILED) {
                          s0 = peg$parseSwitchStatement();
                          if (s0 as any === peg$FAILED) {
                            s0 = peg$parseExitStatement();
                            if (s0 as any === peg$FAILED) {
                              s0 = peg$parsePreProcStatement();
                              if (s0 as any === peg$FAILED) {
                                s0 = peg$parseMultiLineComment();
                                if (s0 as any === peg$FAILED) {
                                  s0 = peg$parseSelectStatement();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEmptyStatement(): any {
    let s0, s1, s2;

    const key = peg$currPos * 158 + 135;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseLineTerminatorSequence();
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c465();
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseStatementList(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 158 + 136;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseStatement();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseStatement();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseStatement();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c284(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseVariableStatement(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 158 + 137;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseStaticToken();
    if (s2 as any !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any === peg$FAILED) {
      s1 = null;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$currPos;
      s4 = peg$parseLocalToken();
      if (s4 as any === peg$FAILED) {
        s4 = peg$parseGlobalToken();
        if (s4 as any === peg$FAILED) {
          s4 = peg$parseDimToken();
        }
      }
      if (s4 as any !== peg$FAILED) {
        s3 = input.substring(s3, peg$currPos);
      } else {
        s3 = s4;
      }
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parseConstToken();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 as any === peg$FAILED) {
          s3 = null;
        }
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseVariableDeclarationList();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseEOS();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c466(s1, s2, s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseLocalToken();
      if (s3 as any === peg$FAILED) {
        s3 = peg$parseGlobalToken();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseDimToken();
        }
      }
      if (s3 as any !== peg$FAILED) {
        s2 = input.substring(s2, peg$currPos);
      } else {
        s2 = s3;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 as any !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 as any === peg$FAILED) {
        s1 = null;
      }
      if (s1 as any !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseStaticToken();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 as any === peg$FAILED) {
          s2 = null;
        }
        if (s2 as any !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseConstToken();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 as any !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 as any === peg$FAILED) {
            s3 = null;
          }
          if (s3 as any !== peg$FAILED) {
            s4 = peg$parseVariableDeclarationList();
            if (s4 as any !== peg$FAILED) {
              s5 = peg$parseEOS();
              if (s5 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c467(s1, s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseRedimToken();
        if (s1 as any !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 as any !== peg$FAILED) {
            s3 = peg$parseRedimIdentifierExpression();
            if (s3 as any !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s7 = peg$c30;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseRedimIdentifierExpression();
                    if (s9 as any !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 as any !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$parse__();
                if (s6 as any !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 44) {
                    s7 = peg$c30;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c31); }
                  }
                  if (s7 as any !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 as any !== peg$FAILED) {
                      s9 = peg$parseRedimIdentifierExpression();
                      if (s9 as any !== peg$FAILED) {
                        s6 = [s6, s7, s8, s9];
                        s5 = s6;
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s4 as any !== peg$FAILED) {
                s5 = peg$parseEOS();
                if (s5 as any !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c468(s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 as any === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = peg$currPos;
          s3 = peg$parseLocalToken();
          if (s3 as any === peg$FAILED) {
            s3 = peg$parseGlobalToken();
            if (s3 as any === peg$FAILED) {
              s3 = peg$parseDimToken();
            }
          }
          if (s3 as any !== peg$FAILED) {
            s2 = input.substring(s2, peg$currPos);
          } else {
            s2 = s3;
          }
          if (s2 as any !== peg$FAILED) {
            s3 = peg$parse__();
            if (s3 as any !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 as any === peg$FAILED) {
            s1 = null;
          }
          if (s1 as any !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseConstToken();
            if (s3 as any !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 as any !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 as any === peg$FAILED) {
              s2 = null;
            }
            if (s2 as any !== peg$FAILED) {
              s3 = peg$parseEnumToken();
              if (s3 as any !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 as any !== peg$FAILED) {
                  s5 = peg$parseEnumDeclarationList();
                  if (s5 as any !== peg$FAILED) {
                    s6 = peg$parseEOS();
                    if (s6 as any !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c469(s1, s2, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRedimIdentifierExpression(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    const key = peg$currPos * 158 + 138;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseVariableIdentifier();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s5 = peg$c33;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c34); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseExpression();
            if (s7 as any !== peg$FAILED) {
              s8 = peg$parse__();
              if (s8 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s9 = peg$c35;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c36); }
                }
                if (s9 as any !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8, s9];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 as any !== peg$FAILED) {
          while (s4 as any !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s5 = peg$c33;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseExpression();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 as any !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s9 = peg$c35;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c36); }
                    }
                    if (s9 as any !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8, s9];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExpressionStatement(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 139;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    s2 = peg$parseFuncToken();
    peg$silentFails--;
    if (s2 as any === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseExpression();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseEOS();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c470(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIfStatement(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;

    const key = peg$currPos * 158 + 140;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseIfToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseExpression();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseThenToken();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseEOS();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parse__();
                  if (s9 as any !== peg$FAILED) {
                    s10 = peg$parseStatementList();
                    if (s10 as any !== peg$FAILED) {
                      s11 = peg$parse__();
                      if (s11 as any !== peg$FAILED) {
                        s9 = [s9, s10, s11];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 as any === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parseElseIfClauses();
                      if (s10 as any === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parse__();
                        if (s11 as any !== peg$FAILED) {
                          s12 = peg$parse__();
                          if (s12 as any !== peg$FAILED) {
                            s13 = peg$parseElseClause();
                            if (s13 as any === peg$FAILED) {
                              s13 = null;
                            }
                            if (s13 as any !== peg$FAILED) {
                              s14 = peg$parse__();
                              if (s14 as any !== peg$FAILED) {
                                s15 = peg$parseEndIfToken();
                                if (s15 as any !== peg$FAILED) {
                                  s16 = peg$parseEOS();
                                  if (s16 as any !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16];
                                    s0 = s1;
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseIfToken();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 as any !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 as any !== peg$FAILED) {
              s5 = peg$parseThenToken();
              if (s5 as any !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 as any !== peg$FAILED) {
                  s7 = peg$parseStatement();
                  if (s7 as any !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseElseIfClauses(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 158 + 141;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseElseIfClause();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseElseIfClause();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseElseIfClause();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c284(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseElseIfClause(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    const key = peg$currPos * 158 + 142;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseElseIfToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseExpression();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseThenToken();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseEOS();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parse__();
                  if (s9 as any !== peg$FAILED) {
                    s10 = peg$parseStatementList();
                    if (s10 as any !== peg$FAILED) {
                      s11 = peg$parse__();
                      if (s11 as any !== peg$FAILED) {
                        s9 = [s9, s10, s11];
                        s8 = s9;
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 as any === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 as any !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7, s8];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseElseClause(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 143;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseElseToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseEOS();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$parse__();
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parseStatementList();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 as any !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 as any === peg$FAILED) {
            s4 = null;
          }
          if (s4 as any !== peg$FAILED) {
            s1 = [s1, s2, s3, s4];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseIterationStatement(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;

    const key = peg$currPos * 158 + 144;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseDoToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseEOS();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseStatementList();
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseUntilToken();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 as any !== peg$FAILED) {
                    s9 = peg$parseExpression();
                    if (s9 as any !== peg$FAILED) {
                      s10 = peg$parse__();
                      if (s10 as any !== peg$FAILED) {
                        s11 = peg$parseEOS();
                        if (s11 as any !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c471(s5, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseWhileToken();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 as any !== peg$FAILED) {
          s3 = peg$parseExpression();
          if (s3 as any !== peg$FAILED) {
            s4 = peg$parse__();
            if (s4 as any !== peg$FAILED) {
              s5 = peg$parseEOS();
              if (s5 as any !== peg$FAILED) {
                s6 = peg$parse__();
                if (s6 as any !== peg$FAILED) {
                  s7 = peg$parseStatementList();
                  if (s7 as any === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 as any !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 as any !== peg$FAILED) {
                      s9 = peg$parseWEndToken();
                      if (s9 as any !== peg$FAILED) {
                        s10 = peg$parse__();
                        if (s10 as any !== peg$FAILED) {
                          s11 = peg$parseEOS();
                          if (s11 as any !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c472(s3, s7);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 as any === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseForToken();
        if (s1 as any !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 as any !== peg$FAILED) {
            s3 = peg$parseVariableIdentifier();
            if (s3 as any !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 as any !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s5 = peg$c38;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c39); }
                }
                if (s5 as any !== peg$FAILED) {
                  s6 = peg$parse__();
                  if (s6 as any !== peg$FAILED) {
                    s7 = peg$parseExpression();
                    if (s7 as any !== peg$FAILED) {
                      s8 = peg$parse__();
                      if (s8 as any !== peg$FAILED) {
                        s9 = peg$parseToToken();
                        if (s9 as any !== peg$FAILED) {
                          s10 = peg$parse__();
                          if (s10 as any !== peg$FAILED) {
                            s11 = peg$parseExpression();
                            if (s11 as any !== peg$FAILED) {
                              s12 = peg$parse__();
                              if (s12 as any !== peg$FAILED) {
                                s13 = peg$currPos;
                                s14 = peg$parseStepToken();
                                if (s14 as any !== peg$FAILED) {
                                  s15 = peg$parse__();
                                  if (s15 as any !== peg$FAILED) {
                                    s16 = peg$parseExpression();
                                    if (s16 as any !== peg$FAILED) {
                                      s14 = [s14, s15, s16];
                                      s13 = s14;
                                    } else {
                                      peg$currPos = s13;
                                      s13 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s13;
                                    s13 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s13;
                                  s13 = peg$FAILED;
                                }
                                if (s13 as any === peg$FAILED) {
                                  s13 = null;
                                }
                                if (s13 as any !== peg$FAILED) {
                                  s14 = peg$parseEOS();
                                  if (s14 as any !== peg$FAILED) {
                                    s15 = peg$parse__();
                                    if (s15 as any !== peg$FAILED) {
                                      s16 = peg$parseStatementList();
                                      if (s16 as any === peg$FAILED) {
                                        s16 = null;
                                      }
                                      if (s16 as any !== peg$FAILED) {
                                        s17 = peg$parse__();
                                        if (s17 as any !== peg$FAILED) {
                                          s18 = peg$parseNextToken();
                                          if (s18 as any !== peg$FAILED) {
                                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18];
                                            s0 = s1;
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 as any === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseForToken();
          if (s1 as any !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 as any !== peg$FAILED) {
              s3 = peg$parseVariableIdentifier();
              if (s3 as any !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 as any !== peg$FAILED) {
                  s5 = peg$parseInToken();
                  if (s5 as any !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 as any !== peg$FAILED) {
                      s7 = peg$parseExpression();
                      if (s7 as any !== peg$FAILED) {
                        s8 = peg$parse__();
                        if (s8 as any !== peg$FAILED) {
                          s9 = peg$parseStatementList();
                          if (s9 as any === peg$FAILED) {
                            s9 = null;
                          }
                          if (s9 as any !== peg$FAILED) {
                            s10 = peg$parse__();
                            if (s10 as any !== peg$FAILED) {
                              s11 = peg$parseNextToken();
                              if (s11 as any !== peg$FAILED) {
                                s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEOS(): any {
    let s0, s1, s2, s3;

    const key = peg$currPos * 158 + 145;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parseSingleLineComment();
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseLineTerminatorSequence();
        if (s3 as any === peg$FAILED) {
          s3 = peg$parseEOF();
        }
        if (s3 as any !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseEOF();
        if (s2 as any !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEOF(): any {
    let s0, s1;

    const key = peg$currPos * 158 + 146;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c9); }
    }
    peg$silentFails--;
    if (s1 as any === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse__(): any {
    let s0, s1;

    const key = peg$currPos * 158 + 147;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    s1 = peg$parseWhitespace();
    while (s1 as any !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseWhitespace();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLineTerminatorSequence(): any {
    let s0, s1;

    const key = peg$currPos * 158 + 148;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c474;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c475); }
    }
    if (s0 as any === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c476) {
        s0 = peg$c476;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c477); }
      }
      if (s0 as any === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 13) {
          s0 = peg$c478;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c479); }
        }
        if (s0 as any === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8232) {
            s0 = peg$c480;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c481); }
          }
          if (s0 as any === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 8233) {
              s0 = peg$c482;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c483); }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 as any === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c473); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExpression(): any {
    let s0, s1;

    const key = peg$currPos * 158 + 149;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseAssignmentExpression();
    if (s1 as any !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c484(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseExitStatement(): any {
    let s0, s1, s2, s3, s4;

    const key = peg$currPos * 158 + 150;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseExitToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parseAssignmentExpression();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseEOS();
        if (s3 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c485(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSwitchStatement(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    const key = peg$currPos * 158 + 151;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSwitchToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseExpression();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseEOS();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$parseCaseBlock();
              if (s6 as any !== peg$FAILED) {
                s7 = peg$parseEndSwitchToken();
                if (s7 as any !== peg$FAILED) {
                  s8 = peg$parseEOS();
                  if (s8 as any !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c486(s3, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCaseBlock(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 152;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseCaseClauses();
      if (s3 as any !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 as any === peg$FAILED) {
        s2 = null;
      }
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseDefaultClause();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parseCaseClauses();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parse__();
              if (s7 as any !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c282(s2, s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse__();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseCaseClauses();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 as any === peg$FAILED) {
          s2 = null;
        }
        if (s2 as any !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c283(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCaseClauses(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 158 + 153;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCaseClause();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        s5 = peg$parseCaseClause();
        if (s5 as any !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          s5 = peg$parseCaseClause();
          if (s5 as any !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c284(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCaseClause(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 154;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCaseToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseCaseValueList();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parseEOS();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseStatementList();
              if (s7 as any !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 as any === peg$FAILED) {
              s5 = null;
            }
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c487(s3, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSingleLineComment();
      if (s1 as any !== peg$FAILED) {
        s2 = peg$parseEOS();
        if (s2 as any !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDefaultClause(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

    const key = peg$currPos * 158 + 155;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCaseToken();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseElseToken();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseEOS();
            if (s5 as any !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 as any !== peg$FAILED) {
                s8 = peg$parseStatementList();
                if (s8 as any !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 as any === peg$FAILED) {
                s6 = null;
              }
              if (s6 as any !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c488(s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCaseValueList(): any {
    let s0, s1, s2, s3, s4, s5, s6, s7;

    const key = peg$currPos * 158 + 156;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSwitchCaseValue();
    if (s1 as any !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse__();
      if (s4 as any !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c30;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s5 as any !== peg$FAILED) {
          s6 = peg$parse__();
          if (s6 as any !== peg$FAILED) {
            s7 = peg$parseSwitchCaseValue();
            if (s7 as any !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 as any !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 as any !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c30;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s5 as any !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 as any !== peg$FAILED) {
              s7 = peg$parseSwitchCaseValue();
              if (s7 as any !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 as any !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c32(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSwitchCaseValue(): any {
    let s0, s1, s2, s3, s4, s5;

    const key = peg$currPos * 158 + 157;
    const cached: ICached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseExpression();
    if (s1 as any !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 as any !== peg$FAILED) {
        s3 = peg$parseToToken();
        if (s3 as any !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 as any !== peg$FAILED) {
            s5 = peg$parseExpression();
            if (s5 as any !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c489(s1, s5);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 as any === peg$FAILED) {
      s0 = peg$parseExpression();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }


    var TYPES_TO_PROPERTY_NAMES = {
      CallExpression:   "callee",
      MemberExpression: "object",
    };

    function extractOptional(optional, index) {
      return optional ? optional[index] : null;
    }

      function extractList(list, index) {
        return list.map(function(element) { return element[index]; });
      }

    function buildList(head, tail, index) {
      return [head].concat(extractList(tail, index));
    }

    function buildBinaryExpression(head, tail) {
      return tail.reduce(function(result, element) {
        return {
          type: "BinaryExpression",
          operator: element[1],
          left: result,
          right: element[3]
        };
      }, head);
    }

    function buildLogicalExpression(head, tail) {
      return tail.reduce(function(result, element) {
        return {
          type: "LogicalExpression",
          operator: element[1],
          left: result,
          right: element[3]
        };
      }, head);
    }

    function optionalList(value) {
      return value !== null ? value : [];
    }


  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export interface IParseOptions {
  filename?: string;
  startRule?: string;
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = (input: string, options?: IParseOptions) => any;
export const parse: ParseFunction = peg$parse;

